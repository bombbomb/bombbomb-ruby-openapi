=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.831

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module BombBomb
  # Configures a single prompt which asks a user to record a video into an outgoing email.
  class VideoEmailPrompt
    # Optional. The email template to be used in the sent email, if none supplied, the users' default will be applied.
    attr_accessor :template_id

    # The subject line of the final email
    attr_accessor :email_subject_line

    # The HTML content of the final email
    attr_accessor :email_content

    # Contact Id to send the final email to
    attr_accessor :contact_id

    # List Ids to send the final email to
    attr_accessor :to_lists

    # A paragraph intro statement about the purpose of the email you're recording a video for.
    attr_accessor :prompt_intro

    # An example or explanatory video to help the user understand what to say.
    attr_accessor :example_video_id

    # An example or explanatory video to help the user understand what to say.
    attr_accessor :followup_video_id

    # Whether to send the email if no video is recorded. If set to require a video, and none is added before the videoDueDate, the prompt is cancelled.
    attr_accessor :send_without_video

    # When the video must be recorded by
    attr_accessor :video_due_date

    # The video that was added to the prompt. Read Only.
    attr_accessor :video_id

    # The email that was created by the prompt Read Only.
    attr_accessor :email_id

    # The job sent by the prompt Read Only.
    attr_accessor :job_id

    # The bot that created the prompt.
    attr_accessor :prompt_bot_id

    # Controls whether a user template is applied to the message as it is sent
    attr_accessor :apply_template

    # The facebook message to be passed off to social sender
    attr_accessor :facebook_message

    # The twitter message to be passed off to social sender
    attr_accessor :twitter_message

    # The linkedin message to be passed off to social sender
    attr_accessor :linkedin_message

    # The id for the alternate content id
    attr_accessor :alternate_content_id

    # The identifier of the prompt. Read Only.
    attr_accessor :id

    # The prompt's owner. Read Only.
    attr_accessor :user_id

    # If sent in a jericho context, this will have the jericho id
    attr_accessor :jericho_id

    # The prompt's subject line
    attr_accessor :prompt_subject

    # The suggested script of the prompt.
    attr_accessor :prompt_html

    # When the final email is scheduled to be sent
    attr_accessor :scheduled_send_date

    # The client group campaign that created the prompt.
    attr_accessor :client_group_id

    # The URL of a thumbnail image for this prompt
    attr_accessor :thumbnail_url

    # The status of the prompt: created = 0, sent = 10, recorded = 20, job_created = 30, timed_out = 40, declined = 50 Read Only
    attr_accessor :status

    # When the email was first sent out
    attr_accessor :created_date

    # When the user was last notified about a prompt email waiting for a video
    attr_accessor :last_notified

    # The sendMechanism property
    attr_accessor :send_mechanism

    # The types of mechanisms this prompt can send.
    attr_accessor :send_types


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'template_id' => :'templateId',
        :'email_subject_line' => :'emailSubjectLine',
        :'email_content' => :'emailContent',
        :'contact_id' => :'contactId',
        :'to_lists' => :'toLists',
        :'prompt_intro' => :'promptIntro',
        :'example_video_id' => :'exampleVideoId',
        :'followup_video_id' => :'followupVideoId',
        :'send_without_video' => :'sendWithoutVideo',
        :'video_due_date' => :'videoDueDate',
        :'video_id' => :'videoId',
        :'email_id' => :'emailId',
        :'job_id' => :'jobId',
        :'prompt_bot_id' => :'promptBotId',
        :'apply_template' => :'applyTemplate',
        :'facebook_message' => :'facebookMessage',
        :'twitter_message' => :'twitterMessage',
        :'linkedin_message' => :'linkedinMessage',
        :'alternate_content_id' => :'alternateContentId',
        :'id' => :'id',
        :'user_id' => :'userId',
        :'jericho_id' => :'jerichoId',
        :'prompt_subject' => :'promptSubject',
        :'prompt_html' => :'promptHtml',
        :'scheduled_send_date' => :'scheduledSendDate',
        :'client_group_id' => :'clientGroupId',
        :'thumbnail_url' => :'thumbnailUrl',
        :'status' => :'status',
        :'created_date' => :'createdDate',
        :'last_notified' => :'lastNotified',
        :'send_mechanism' => :'sendMechanism',
        :'send_types' => :'sendTypes'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'template_id' => :'String',
        :'email_subject_line' => :'String',
        :'email_content' => :'String',
        :'contact_id' => :'String',
        :'to_lists' => :'Array<String>',
        :'prompt_intro' => :'String',
        :'example_video_id' => :'String',
        :'followup_video_id' => :'String',
        :'send_without_video' => :'BOOLEAN',
        :'video_due_date' => :'DateTime',
        :'video_id' => :'String',
        :'email_id' => :'String',
        :'job_id' => :'String',
        :'prompt_bot_id' => :'String',
        :'apply_template' => :'BOOLEAN',
        :'facebook_message' => :'String',
        :'twitter_message' => :'String',
        :'linkedin_message' => :'String',
        :'alternate_content_id' => :'String',
        :'id' => :'String',
        :'user_id' => :'String',
        :'jericho_id' => :'String',
        :'prompt_subject' => :'String',
        :'prompt_html' => :'String',
        :'scheduled_send_date' => :'DateTime',
        :'client_group_id' => :'String',
        :'thumbnail_url' => :'String',
        :'status' => :'Integer',
        :'created_date' => :'DateTime',
        :'last_notified' => :'DateTime',
        :'send_mechanism' => :'DateTime',
        :'send_types' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'templateId')
        self.template_id = attributes[:'templateId']
      end

      if attributes.has_key?(:'emailSubjectLine')
        self.email_subject_line = attributes[:'emailSubjectLine']
      end

      if attributes.has_key?(:'emailContent')
        self.email_content = attributes[:'emailContent']
      end

      if attributes.has_key?(:'contactId')
        self.contact_id = attributes[:'contactId']
      end

      if attributes.has_key?(:'toLists')
        if (value = attributes[:'toLists']).is_a?(Array)
          self.to_lists = value
        end
      end

      if attributes.has_key?(:'promptIntro')
        self.prompt_intro = attributes[:'promptIntro']
      end

      if attributes.has_key?(:'exampleVideoId')
        self.example_video_id = attributes[:'exampleVideoId']
      end

      if attributes.has_key?(:'followupVideoId')
        self.followup_video_id = attributes[:'followupVideoId']
      end

      if attributes.has_key?(:'sendWithoutVideo')
        self.send_without_video = attributes[:'sendWithoutVideo']
      end

      if attributes.has_key?(:'videoDueDate')
        self.video_due_date = attributes[:'videoDueDate']
      end

      if attributes.has_key?(:'videoId')
        self.video_id = attributes[:'videoId']
      end

      if attributes.has_key?(:'emailId')
        self.email_id = attributes[:'emailId']
      end

      if attributes.has_key?(:'jobId')
        self.job_id = attributes[:'jobId']
      end

      if attributes.has_key?(:'promptBotId')
        self.prompt_bot_id = attributes[:'promptBotId']
      end

      if attributes.has_key?(:'applyTemplate')
        self.apply_template = attributes[:'applyTemplate']
      end

      if attributes.has_key?(:'facebookMessage')
        self.facebook_message = attributes[:'facebookMessage']
      end

      if attributes.has_key?(:'twitterMessage')
        self.twitter_message = attributes[:'twitterMessage']
      end

      if attributes.has_key?(:'linkedinMessage')
        self.linkedin_message = attributes[:'linkedinMessage']
      end

      if attributes.has_key?(:'alternateContentId')
        self.alternate_content_id = attributes[:'alternateContentId']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'jerichoId')
        self.jericho_id = attributes[:'jerichoId']
      end

      if attributes.has_key?(:'promptSubject')
        self.prompt_subject = attributes[:'promptSubject']
      end

      if attributes.has_key?(:'promptHtml')
        self.prompt_html = attributes[:'promptHtml']
      end

      if attributes.has_key?(:'scheduledSendDate')
        self.scheduled_send_date = attributes[:'scheduledSendDate']
      end

      if attributes.has_key?(:'clientGroupId')
        self.client_group_id = attributes[:'clientGroupId']
      end

      if attributes.has_key?(:'thumbnailUrl')
        self.thumbnail_url = attributes[:'thumbnailUrl']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'createdDate')
        self.created_date = attributes[:'createdDate']
      end

      if attributes.has_key?(:'lastNotified')
        self.last_notified = attributes[:'lastNotified']
      end

      if attributes.has_key?(:'sendMechanism')
        self.send_mechanism = attributes[:'sendMechanism']
      end

      if attributes.has_key?(:'sendTypes')
        if (value = attributes[:'sendTypes']).is_a?(Array)
          self.send_types = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          template_id == o.template_id &&
          email_subject_line == o.email_subject_line &&
          email_content == o.email_content &&
          contact_id == o.contact_id &&
          to_lists == o.to_lists &&
          prompt_intro == o.prompt_intro &&
          example_video_id == o.example_video_id &&
          followup_video_id == o.followup_video_id &&
          send_without_video == o.send_without_video &&
          video_due_date == o.video_due_date &&
          video_id == o.video_id &&
          email_id == o.email_id &&
          job_id == o.job_id &&
          prompt_bot_id == o.prompt_bot_id &&
          apply_template == o.apply_template &&
          facebook_message == o.facebook_message &&
          twitter_message == o.twitter_message &&
          linkedin_message == o.linkedin_message &&
          alternate_content_id == o.alternate_content_id &&
          id == o.id &&
          user_id == o.user_id &&
          jericho_id == o.jericho_id &&
          prompt_subject == o.prompt_subject &&
          prompt_html == o.prompt_html &&
          scheduled_send_date == o.scheduled_send_date &&
          client_group_id == o.client_group_id &&
          thumbnail_url == o.thumbnail_url &&
          status == o.status &&
          created_date == o.created_date &&
          last_notified == o.last_notified &&
          send_mechanism == o.send_mechanism &&
          send_types == o.send_types
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [template_id, email_subject_line, email_content, contact_id, to_lists, prompt_intro, example_video_id, followup_video_id, send_without_video, video_due_date, video_id, email_id, job_id, prompt_bot_id, apply_template, facebook_message, twitter_message, linkedin_message, alternate_content_id, id, user_id, jericho_id, prompt_subject, prompt_html, scheduled_send_date, client_group_id, thumbnail_url, status, created_date, last_notified, send_mechanism, send_types].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = BombBomb.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end

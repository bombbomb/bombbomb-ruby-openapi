=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.25797

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class VideosApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Video Encoding Status
    # Get information about the current state of encoding for a given video id.
    # @param video_id The video&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [VideoEncodingStatusResponse]
    def get_video_encoding_status(video_id, opts = {})
      data, _status_code, _headers = get_video_encoding_status_with_http_info(video_id, opts)
      return data
    end

    # Video Encoding Status
    # Get information about the current state of encoding for a given video id.
    # @param video_id The video&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VideoEncodingStatusResponse, Fixnum, Hash)>] VideoEncodingStatusResponse data, response status code and response headers
    def get_video_encoding_status_with_http_info(video_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VideosApi.get_video_encoding_status ..."
      end
      # verify the required parameter 'video_id' is set
      fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.get_video_encoding_status" if video_id.nil?
      # resource path
      local_var_path = "/videos/{videoId}/status".sub('{format}','json').sub('{' + 'videoId' + '}', video_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VideoEncodingStatusResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#get_video_encoding_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Live Video Recorder HTML
    # Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width The width of the recorder to present.
    # @option opts [String] :video_id The id of the video to record
    # @return [VideoRecorderMethodResponse]
    def get_video_recorder(opts = {})
      data, _status_code, _headers = get_video_recorder_with_http_info(opts)
      return data
    end

    # Get Live Video Recorder HTML
    # Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :width The width of the recorder to present.
    # @option opts [String] :video_id The id of the video to record
    # @return [Array<(VideoRecorderMethodResponse, Fixnum, Hash)>] VideoRecorderMethodResponse data, response status code and response headers
    def get_video_recorder_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VideosApi.get_video_recorder ..."
      end
      # resource path
      local_var_path = "/videos/live/getRecorder".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'width'] = opts[:'width'] if !opts[:'width'].nil?
      query_params[:'videoId'] = opts[:'video_id'] if !opts[:'video_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VideoRecorderMethodResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#get_video_recorder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Completes a live recording
    # Used in conjunction with the live recorder method to mark a video recording as complete.
    # @param video_id The id of the video to mark as done.
    # @param filename The filename that was chosen as the final video.
    # @param title The title to give the video
    # @param [Hash] opts the optional parameters
    # @return [VideoPublicRepresentation]
    def mark_live_recording_complete(video_id, filename, title, opts = {})
      data, _status_code, _headers = mark_live_recording_complete_with_http_info(video_id, filename, title, opts)
      return data
    end

    # Completes a live recording
    # Used in conjunction with the live recorder method to mark a video recording as complete.
    # @param video_id The id of the video to mark as done.
    # @param filename The filename that was chosen as the final video.
    # @param title The title to give the video
    # @param [Hash] opts the optional parameters
    # @return [Array<(VideoPublicRepresentation, Fixnum, Hash)>] VideoPublicRepresentation data, response status code and response headers
    def mark_live_recording_complete_with_http_info(video_id, filename, title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VideosApi.mark_live_recording_complete ..."
      end
      # verify the required parameter 'video_id' is set
      fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.mark_live_recording_complete" if video_id.nil?
      # verify the required parameter 'filename' is set
      fail ArgumentError, "Missing the required parameter 'filename' when calling VideosApi.mark_live_recording_complete" if filename.nil?
      # verify the required parameter 'title' is set
      fail ArgumentError, "Missing the required parameter 'title' when calling VideosApi.mark_live_recording_complete" if title.nil?
      # resource path
      local_var_path = "/videos/live/markComplete".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["videoId"] = video_id
      form_params["filename"] = filename
      form_params["title"] = title

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VideoPublicRepresentation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#mark_live_recording_complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Signed Url
    # Generates a signed url to be used for video uploads.
    # @param policy The policy to sign
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :v4 Whether to do v4 signing
    # @return [String]
    def sign_upload(policy, opts = {})
      data, _status_code, _headers = sign_upload_with_http_info(policy, opts)
      return data
    end

    # Generate Signed Url
    # Generates a signed url to be used for video uploads.
    # @param policy The policy to sign
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :v4 Whether to do v4 signing
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sign_upload_with_http_info(policy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VideosApi.sign_upload ..."
      end
      # verify the required parameter 'policy' is set
      fail ArgumentError, "Missing the required parameter 'policy' when calling VideosApi.sign_upload" if policy.nil?
      # resource path
      local_var_path = "/video/signedUpload".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["v4"] = opts[:'v4'] if !opts[:'v4'].nil?

      # http body (model)
      post_body = @api_client.object_to_http_body(policy)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#sign_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload thumbnail
    # Upload a new video thumbnail
    # @param video_id The id of the video
    # @param thumbnail The thumbnail being uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :custom The default email to use.
    # @return [nil]
    def update_video_thumbnail_v2(video_id, thumbnail, opts = {})
      update_video_thumbnail_v2_with_http_info(video_id, thumbnail, opts)
      return nil
    end

    # Upload thumbnail
    # Upload a new video thumbnail
    # @param video_id The id of the video
    # @param thumbnail The thumbnail being uploaded
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :custom The default email to use.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_video_thumbnail_v2_with_http_info(video_id, thumbnail, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VideosApi.update_video_thumbnail_v2 ..."
      end
      # verify the required parameter 'video_id' is set
      fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.update_video_thumbnail_v2" if video_id.nil?
      # verify the required parameter 'thumbnail' is set
      fail ArgumentError, "Missing the required parameter 'thumbnail' when calling VideosApi.update_video_thumbnail_v2" if thumbnail.nil?
      # resource path
      local_var_path = "/videos/thumbnail".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["videoId"] = video_id
      form_params["thumbnail"] = thumbnail
      form_params["custom"] = opts[:'custom'] if !opts[:'custom'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#update_video_thumbnail_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.831

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module BombBomb
  class ContactsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add contacts from a CSV file.
    # Add multiple contacts through the upload importer from a CSV file.
    # @param mapping_data The info sent for the contacts
    # @param list_data The info sent with the import for the list
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_contacts_csv(mapping_data, list_data, opts = {})
      add_contacts_csv_with_http_info(mapping_data, list_data, opts)
      return nil
    end

    # Add contacts from a CSV file.
    # Add multiple contacts through the upload importer from a CSV file.
    # @param mapping_data The info sent for the contacts
    # @param list_data The info sent with the import for the list
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_contacts_csv_with_http_info(mapping_data, list_data, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.add_contacts_csv ..."
      end
      # verify the required parameter 'mapping_data' is set
      if @api_client.config.client_side_validation && mapping_data.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_data' when calling ContactsApi.add_contacts_csv"
      end
      # verify the required parameter 'list_data' is set
      if @api_client.config.client_side_validation && list_data.nil?
        fail ArgumentError, "Missing the required parameter 'list_data' when calling ContactsApi.add_contacts_csv"
      end
      # resource path
      local_var_path = "/contacts/import_csv"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["mappingData"] = mapping_data
      form_params["listData"] = list_data

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#add_contacts_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a contact.
    # Add a contact to the users list.
    # @param contact_email Email of the new contact we are adding
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact_info The info sent for this contact
    # @return [nil]
    def add_new_contact(contact_email, opts = {})
      add_new_contact_with_http_info(contact_email, opts)
      return nil
    end

    # Add a contact.
    # Add a contact to the users list.
    # @param contact_email Email of the new contact we are adding
    # @param [Hash] opts the optional parameters
    # @option opts [String] :contact_info The info sent for this contact
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_new_contact_with_http_info(contact_email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.add_new_contact ..."
      end
      # verify the required parameter 'contact_email' is set
      if @api_client.config.client_side_validation && contact_email.nil?
        fail ArgumentError, "Missing the required parameter 'contact_email' when calling ContactsApi.add_new_contact"
      end
      # resource path
      local_var_path = "/contacts/"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["contactEmail"] = contact_email
      form_params["contactInfo"] = opts[:'contact_info'] if !opts[:'contact_info'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#add_new_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add custom fields.
    # Add a new custom field.
    # @param field_name Custom field name to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field_type Custom field type for the field to be added
    # @return [nil]
    def add_new_custom_field(field_name, opts = {})
      add_new_custom_field_with_http_info(field_name, opts)
      return nil
    end

    # Add custom fields.
    # Add a new custom field.
    # @param field_name Custom field name to be added
    # @param [Hash] opts the optional parameters
    # @option opts [String] :field_type Custom field type for the field to be added
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_new_custom_field_with_http_info(field_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.add_new_custom_field ..."
      end
      # verify the required parameter 'field_name' is set
      if @api_client.config.client_side_validation && field_name.nil?
        fail ArgumentError, "Missing the required parameter 'field_name' when calling ContactsApi.add_new_custom_field"
      end
      # resource path
      local_var_path = "/contacts/custom_fields/"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fieldName"] = field_name
      form_params["fieldType"] = opts[:'field_type'] if !opts[:'field_type'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#add_new_custom_field\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add pasted contacts.
    # Add the pasted contacts to the users list.
    # @param contact_emails Emails array of the new contacts we are adding
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_info Information about the lists id, recalculations on totals, consent etc
    # @return [nil]
    def add_pasted_contacts(contact_emails, opts = {})
      add_pasted_contacts_with_http_info(contact_emails, opts)
      return nil
    end

    # Add pasted contacts.
    # Add the pasted contacts to the users list.
    # @param contact_emails Emails array of the new contacts we are adding
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_info Information about the lists id, recalculations on totals, consent etc
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_pasted_contacts_with_http_info(contact_emails, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.add_pasted_contacts ..."
      end
      # verify the required parameter 'contact_emails' is set
      if @api_client.config.client_side_validation && contact_emails.nil?
        fail ArgumentError, "Missing the required parameter 'contact_emails' when calling ContactsApi.add_pasted_contacts"
      end
      # resource path
      local_var_path = "/contacts/paste"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["contactEmails"] = contact_emails
      form_params["listInfo"] = opts[:'list_info'] if !opts[:'list_info'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#add_pasted_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Format CSV.
    # Format a CSV file to an object.
    # @param file The CSV file being uploaded
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def c_sv_to_object(file, opts = {})
      c_sv_to_object_with_http_info(file, opts)
      return nil
    end

    # Format CSV.
    # Format a CSV file to an object.
    # @param file The CSV file being uploaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def c_sv_to_object_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.c_sv_to_object ..."
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ContactsApi.c_sv_to_object"
      end
      # resource path
      local_var_path = "/csv-to-object"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["file"] = file

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#c_sv_to_object\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Contacts
    # Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_id The list of contacts to be deleted.
    # @option opts [String] :contact_ids comma separated list of contact ids to delete
    # @return [nil]
    def delete_contacts(opts = {})
      delete_contacts_with_http_info(opts)
      return nil
    end

    # Delete Contacts
    # Delete all contacts within a list, or provide a comma separated list of contactIds to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :list_id The list of contacts to be deleted.
    # @option opts [String] :contact_ids comma separated list of contact ids to delete
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_contacts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.delete_contacts ..."
      end
      # resource path
      local_var_path = "/contacts/delete"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["listId"] = opts[:'list_id'] if !opts[:'list_id'].nil?
      form_params["contactIds"] = opts[:'contact_ids'] if !opts[:'contact_ids'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#delete_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Contact Details
    # Get the contact details
    # @param id Guid for the contact.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_contact_by_id(id, opts = {})
      get_contact_by_id_with_http_info(id, opts)
      return nil
    end

    # Get Contact Details
    # Get the contact details
    # @param id Guid for the contact.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_contact_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.get_contact_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContactsApi.get_contact_by_id"
      end
      # resource path
      local_var_path = "/contact/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_contact_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom fields.
    # Get the current users custom fields.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_custom_fields(opts = {})
      get_custom_fields_with_http_info(opts)
      return nil
    end

    # Get custom fields.
    # Get the current users custom fields.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_custom_fields_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ContactsApi.get_custom_fields ..."
      end
      # resource path
      local_var_path = "/contacts/custom_fields/"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContactsApi#get_custom_fields\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

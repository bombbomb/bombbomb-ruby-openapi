=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.831

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module BombBomb
  class TeamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add Member to Team
    # Adds a member to a team.
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :admin Set if the user is an admin of this team.
    # @option opts [String] :subgroup_ids Subgroup IDs to add user to
    # @option opts [String] :user_email The email of the member being added to the team.
    # @option opts [String] :user_id The user id of the member being added to the team.
    # @return [String]
    def add_team_member(team_id, opts = {})
      data, _status_code, _headers = add_team_member_with_http_info(team_id, opts)
      return data
    end

    # Add Member to Team
    # Adds a member to a team.
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :admin Set if the user is an admin of this team.
    # @option opts [String] :subgroup_ids Subgroup IDs to add user to
    # @option opts [String] :user_email The email of the member being added to the team.
    # @option opts [String] :user_id The user id of the member being added to the team.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def add_team_member_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.add_team_member ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.add_team_member"
      end
      # resource path
      local_var_path = "/team/{teamId}/member".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["admin"] = opts[:'admin'] if !opts[:'admin'].nil?
      form_params["subgroupIds"] = opts[:'subgroup_ids'] if !opts[:'subgroup_ids'].nil?
      form_params["userEmail"] = opts[:'user_email'] if !opts[:'user_email'].nil?
      form_params["userId"] = opts[:'user_id'] if !opts[:'user_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#add_team_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add users to group.
    # Add a new or existing user to group.
    # @param team_id The team id
    # @param user_details Array of emails or objects containing details needed to create user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :send_welcome_email Whether to send welcome email to new users
    # @option opts [String] :subgroup_ids Subgroup IDs to add user to
    # @return [nil]
    def add_users(team_id, user_details, opts = {})
      add_users_with_http_info(team_id, user_details, opts)
      return nil
    end

    # Add users to group.
    # Add a new or existing user to group.
    # @param team_id The team id
    # @param user_details Array of emails or objects containing details needed to create user
    # @param [Hash] opts the optional parameters
    # @option opts [String] :send_welcome_email Whether to send welcome email to new users
    # @option opts [String] :subgroup_ids Subgroup IDs to add user to
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_users_with_http_info(team_id, user_details, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.add_users ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.add_users"
      end
      # verify the required parameter 'user_details' is set
      if @api_client.config.client_side_validation && user_details.nil?
        fail ArgumentError, "Missing the required parameter 'user_details' when calling TeamsApi.add_users"
      end
      # resource path
      local_var_path = "/team/{teamId}/members".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["userDetails"] = user_details
      form_params["sendWelcomeEmail"] = opts[:'send_welcome_email'] if !opts[:'send_welcome_email'].nil?
      form_params["subgroupIds"] = opts[:'subgroup_ids'] if !opts[:'subgroup_ids'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#add_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add members to group from CSV
    # Imports members to a group from a given CSV ID.
    # @param team_id The team id
    # @param csv_import_id ID of the CSV to import
    # @param map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :send_welcome_email Whether to send welcome email to new users
    # @option opts [String] :subgroup_ids Subgroup IDs to add user to
    # @return [nil]
    def add_users_from_csv(team_id, csv_import_id, map, opts = {})
      add_users_from_csv_with_http_info(team_id, csv_import_id, map, opts)
      return nil
    end

    # Add members to group from CSV
    # Imports members to a group from a given CSV ID.
    # @param team_id The team id
    # @param csv_import_id ID of the CSV to import
    # @param map Object to use when mapping import to AccountCreateDetails. Key is property name on details, value is CSV column number.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :send_welcome_email Whether to send welcome email to new users
    # @option opts [String] :subgroup_ids Subgroup IDs to add user to
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_users_from_csv_with_http_info(team_id, csv_import_id, map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.add_users_from_csv ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.add_users_from_csv"
      end
      # verify the required parameter 'csv_import_id' is set
      if @api_client.config.client_side_validation && csv_import_id.nil?
        fail ArgumentError, "Missing the required parameter 'csv_import_id' when calling TeamsApi.add_users_from_csv"
      end
      # verify the required parameter 'map' is set
      if @api_client.config.client_side_validation && map.nil?
        fail ArgumentError, "Missing the required parameter 'map' when calling TeamsApi.add_users_from_csv"
      end
      # resource path
      local_var_path = "/team/{teamId}/members/csv".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["csvImportId"] = csv_import_id
      form_params["map"] = map
      form_params["sendWelcomeEmail"] = opts[:'send_welcome_email'] if !opts[:'send_welcome_email'].nil?
      form_params["subgroupIds"] = opts[:'subgroup_ids'] if !opts[:'subgroup_ids'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#add_users_from_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel a Jericho Send
    # Cancels a scheduled Jericho send from being sent.
    # @param jericho_id ID of the Jericho Job to cancel
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_jericho_send(jericho_id, opts = {})
      cancel_jericho_send_with_http_info(jericho_id, opts)
      return nil
    end

    # Cancel a Jericho Send
    # Cancels a scheduled Jericho send from being sent.
    # @param jericho_id ID of the Jericho Job to cancel
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_jericho_send_with_http_info(jericho_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.cancel_jericho_send ..."
      end
      # verify the required parameter 'jericho_id' is set
      if @api_client.config.client_side_validation && jericho_id.nil?
        fail ArgumentError, "Missing the required parameter 'jericho_id' when calling TeamsApi.cancel_jericho_send"
      end
      # resource path
      local_var_path = "/team/{teamId}/jericho/{jerichoId}".sub('{' + 'jerichoId' + '}', jericho_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#cancel_jericho_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add a Subteam
    # Adds a subteam to a parent team
    # @param team_id The team id
    # @param name The subteam&#39;s name.
    # @param [Hash] opts the optional parameters
    # @return [TeamPublicRepresentation]
    def create_subteam(team_id, name, opts = {})
      data, _status_code, _headers = create_subteam_with_http_info(team_id, name, opts)
      return data
    end

    # Add a Subteam
    # Adds a subteam to a parent team
    # @param team_id The team id
    # @param name The subteam&#39;s name.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamPublicRepresentation, Fixnum, Hash)>] TeamPublicRepresentation data, response status code and response headers
    def create_subteam_with_http_info(team_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.create_subteam ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.create_subteam"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TeamsApi.create_subteam"
      end
      # resource path
      local_var_path = "/team/{teamId}/subteam".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = name

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TeamPublicRepresentation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#create_subteam\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Subteam
    # Deletes a subteam
    # @param team_id The team id
    # @param subteam_id The subteam you wish to delete.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_subteam(team_id, subteam_id, opts = {})
      data, _status_code, _headers = delete_subteam_with_http_info(team_id, subteam_id, opts)
      return data
    end

    # Delete Subteam
    # Deletes a subteam
    # @param team_id The team id
    # @param subteam_id The subteam you wish to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_subteam_with_http_info(team_id, subteam_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.delete_subteam ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.delete_subteam"
      end
      # verify the required parameter 'subteam_id' is set
      if @api_client.config.client_side_validation && subteam_id.nil?
        fail ArgumentError, "Missing the required parameter 'subteam_id' when calling TeamsApi.delete_subteam"
      end
      # resource path
      local_var_path = "/team/{teamId}/subteam".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["subteamId"] = subteam_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#delete_subteam\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists team associations
    # Returns a collection of team associations for a given user
    # @param client_id The clientId requesting group associations.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_all_client_group_associations(client_id, opts = {})
      get_all_client_group_associations_with_http_info(client_id, opts)
      return nil
    end

    # Lists team associations
    # Returns a collection of team associations for a given user
    # @param client_id The clientId requesting group associations.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_all_client_group_associations_with_http_info(client_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_all_client_group_associations ..."
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling TeamsApi.get_all_client_group_associations"
      end
      # resource path
      local_var_path = "/team/associations/"

      # query parameters
      query_params = {}
      query_params[:'clientId'] = client_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_all_client_group_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists team assets
    # Returns a collection of assets
    # @param asset_type The type of assets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The team containing the assets.
    # @option opts [String] :auto_tag_name The auto tag name containing the assets.
    # @option opts [String] :page_size The number of items to retrieve in a single db query.
    # @option opts [String] :page Zero-based index of the page of data to retrieve from the db.
    # @option opts [String] :search Search words.
    # @return [InlineResponse200]
    def get_client_group_assets(asset_type, opts = {})
      data, _status_code, _headers = get_client_group_assets_with_http_info(asset_type, opts)
      return data
    end

    # Lists team assets
    # Returns a collection of assets
    # @param asset_type The type of assets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The team containing the assets.
    # @option opts [String] :auto_tag_name The auto tag name containing the assets.
    # @option opts [String] :page_size The number of items to retrieve in a single db query.
    # @option opts [String] :page Zero-based index of the page of data to retrieve from the db.
    # @option opts [String] :search Search words.
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_client_group_assets_with_http_info(asset_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_client_group_assets ..."
      end
      # verify the required parameter 'asset_type' is set
      if @api_client.config.client_side_validation && asset_type.nil?
        fail ArgumentError, "Missing the required parameter 'asset_type' when calling TeamsApi.get_client_group_assets"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['email', 'video'].include?(asset_type)
        fail ArgumentError, "invalid value for 'asset_type', must be one of email, video"
      end
      # resource path
      local_var_path = "/team/assets/"

      # query parameters
      query_params = {}
      query_params[:'assetType'] = asset_type
      query_params[:'teamId'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'autoTagName'] = opts[:'auto_tag_name'] if !opts[:'auto_tag_name'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_client_group_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Team statistics
    # Get top level statistic data for a Team
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :member_status The status of members to query for
    # @return [nil]
    def get_client_group_statistics(team_id, opts = {})
      get_client_group_statistics_with_http_info(team_id, opts)
      return nil
    end

    # Get Team statistics
    # Get top level statistic data for a Team
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :member_status The status of members to query for
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_client_group_statistics_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_client_group_statistics ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_client_group_statistics"
      end
      if @api_client.config.client_side_validation && opts[:'member_status'] && !['all', 'active', 'inactive', 'self-paid'].include?(opts[:'member_status'])
        fail ArgumentError, 'invalid value for "member_status", must be one of all, active, inactive, self-paid'
      end
      # resource path
      local_var_path = "/team/{teamId}/stats".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'memberStatus'] = opts[:'member_status'] if !opts[:'member_status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_client_group_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Jericho Sends
    # Lists Jericho sends, both pending and sent.
    # @param team_id The team whose Jericho sends you wish to see.
    # @param [Hash] opts the optional parameters
    # @return [Array<JerichoConfiguration>]
    def get_jericho_sends(team_id, opts = {})
      data, _status_code, _headers = get_jericho_sends_with_http_info(team_id, opts)
      return data
    end

    # List Jericho Sends
    # Lists Jericho sends, both pending and sent.
    # @param team_id The team whose Jericho sends you wish to see.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JerichoConfiguration>, Fixnum, Hash)>] Array<JerichoConfiguration> data, response status code and response headers
    def get_jericho_sends_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_jericho_sends ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_jericho_sends"
      end
      # resource path
      local_var_path = "/team/{teamId}/jericho".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JerichoConfiguration>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_jericho_sends\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Jericho performance statistics
    # Returns an aggregate view of the performance of a Jericho send
    # @param jericho_id ID of the Jericho job
    # @param team_id ID of team through which Jericho was sent
    # @param [Hash] opts the optional parameters
    # @return [JerichoPerformance]
    def get_jericho_stats(jericho_id, team_id, opts = {})
      data, _status_code, _headers = get_jericho_stats_with_http_info(jericho_id, team_id, opts)
      return data
    end

    # Gets Jericho performance statistics
    # Returns an aggregate view of the performance of a Jericho send
    # @param jericho_id ID of the Jericho job
    # @param team_id ID of team through which Jericho was sent
    # @param [Hash] opts the optional parameters
    # @return [Array<(JerichoPerformance, Fixnum, Hash)>] JerichoPerformance data, response status code and response headers
    def get_jericho_stats_with_http_info(jericho_id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_jericho_stats ..."
      end
      # verify the required parameter 'jericho_id' is set
      if @api_client.config.client_side_validation && jericho_id.nil?
        fail ArgumentError, "Missing the required parameter 'jericho_id' when calling TeamsApi.get_jericho_stats"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_jericho_stats"
      end
      # resource path
      local_var_path = "/team/{teamId}/jericho/{jerichoId}/performance".sub('{' + 'jerichoId' + '}', jericho_id.to_s).sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JerichoPerformance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_jericho_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Team Members
    # Get a paginated listing of Team members
    # @param team_id The team id
    # @param page_size Amount of records to return in a page.
    # @param page The page to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The status type to filter by.
    # @option opts [String] :search Filter results with names that match the search term.
    # @option opts [String] :order_by Key to order results by
    # @option opts [String] :order_direction ASC or DESC
    # @return [nil]
    def get_paged_client_group_members(team_id, page_size, page, opts = {})
      get_paged_client_group_members_with_http_info(team_id, page_size, page, opts)
      return nil
    end

    # List Team Members
    # Get a paginated listing of Team members
    # @param team_id The team id
    # @param page_size Amount of records to return in a page.
    # @param page The page to return.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status The status type to filter by.
    # @option opts [String] :search Filter results with names that match the search term.
    # @option opts [String] :order_by Key to order results by
    # @option opts [String] :order_direction ASC or DESC
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_paged_client_group_members_with_http_info(team_id, page_size, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_paged_client_group_members ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_paged_client_group_members"
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling TeamsApi.get_paged_client_group_members"
      end
      # verify the required parameter 'page' is set
      if @api_client.config.client_side_validation && page.nil?
        fail ArgumentError, "Missing the required parameter 'page' when calling TeamsApi.get_paged_client_group_members"
      end
      if @api_client.config.client_side_validation && opts[:'order_by'] && !['jobs', 'logins', 'videos', 'contacts', 'firstName', 'lastName', 'status', 'isAdmin'].include?(opts[:'order_by'])
        fail ArgumentError, 'invalid value for "order_by", must be one of jobs, logins, videos, contacts, firstName, lastName, status, isAdmin'
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['ASC', 'DESC'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/team/{teamId}/members".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = page_size
      query_params[:'page'] = page
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'orderBy'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'orderDirection'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_paged_client_group_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Jericho Monthly Stats
    # Jericho Monthly Stats
    # @param month The month whose Jericho sends you wish to see.
    # @param year The year whose Jericho sends you wish to see.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_prompt_monthly_stats(month, year, opts = {})
      data, _status_code, _headers = get_prompt_monthly_stats_with_http_info(month, year, opts)
      return data
    end

    # Jericho Monthly Stats
    # Jericho Monthly Stats
    # @param month The month whose Jericho sends you wish to see.
    # @param year The year whose Jericho sends you wish to see.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_prompt_monthly_stats_with_http_info(month, year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_prompt_monthly_stats ..."
      end
      # verify the required parameter 'month' is set
      if @api_client.config.client_side_validation && month.nil?
        fail ArgumentError, "Missing the required parameter 'month' when calling TeamsApi.get_prompt_monthly_stats"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling TeamsApi.get_prompt_monthly_stats"
      end
      # resource path
      local_var_path = "/team/{month}/{year}/monthStats".sub('{' + 'month' + '}', month.to_s).sub('{' + 'year' + '}', year.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_prompt_monthly_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Prompt Overview
    # Get Prompt Overview
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_prompt_overview(opts = {})
      data, _status_code, _headers = get_prompt_overview_with_http_info(opts)
      return data
    end

    # Get Prompt Overview
    # Get Prompt Overview
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_prompt_overview_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_prompt_overview ..."
      end
      # resource path
      local_var_path = "/team/promptOverview"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_prompt_overview\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Subteams
    # Returns a collection of subteams for a parent team
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @return [Array<TeamPublicRepresentation>]
    def get_subteams(team_id, opts = {})
      data, _status_code, _headers = get_subteams_with_http_info(team_id, opts)
      return data
    end

    # List Subteams
    # Returns a collection of subteams for a parent team
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TeamPublicRepresentation>, Fixnum, Hash)>] Array<TeamPublicRepresentation> data, response status code and response headers
    def get_subteams_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_subteams ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_subteams"
      end
      # resource path
      local_var_path = "/team/{teamId}/subteam".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamPublicRepresentation>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_subteams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get aggregate stats for campaigns
    # Get all the campaigns aggregate stats
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_team_prompt_aggregate_stats(client_group_id, opts = {})
      get_team_prompt_aggregate_stats_with_http_info(client_group_id, opts)
      return nil
    end

    # Get aggregate stats for campaigns
    # Get all the campaigns aggregate stats
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_team_prompt_aggregate_stats_with_http_info(client_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_team_prompt_aggregate_stats ..."
      end
      # verify the required parameter 'client_group_id' is set
      if @api_client.config.client_side_validation && client_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_group_id' when calling TeamsApi.get_team_prompt_aggregate_stats"
      end
      # resource path
      local_var_path = "/team/{clientGroupId}/campaign/stats".sub('{' + 'clientGroupId' + '}', client_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_team_prompt_aggregate_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get campaigns for team
    # Get campaigns for the team and their stats
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_term The value to search for in prompt subject
    # @option opts [String] :current_page The current page
    # @return [nil]
    def get_team_prompt_campaigns(client_group_id, opts = {})
      get_team_prompt_campaigns_with_http_info(client_group_id, opts)
      return nil
    end

    # Get campaigns for team
    # Get campaigns for the team and their stats
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search_term The value to search for in prompt subject
    # @option opts [String] :current_page The current page
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_team_prompt_campaigns_with_http_info(client_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_team_prompt_campaigns ..."
      end
      # verify the required parameter 'client_group_id' is set
      if @api_client.config.client_side_validation && client_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_group_id' when calling TeamsApi.get_team_prompt_campaigns"
      end
      # resource path
      local_var_path = "/team/{clientGroupId}/campaign".sub('{' + 'clientGroupId' + '}', client_group_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'searchTerm'] = opts[:'search_term'] if !opts[:'search_term'].nil?
      query_params[:'currentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_team_prompt_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite a list to join the admin's social prompt team
    # Invite to Social Prompt Team
    # @param team_id The team id
    # @param list_id List to invite to the social prompt team.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def invite_to_social_prompt_team(team_id, list_id, opts = {})
      invite_to_social_prompt_team_with_http_info(team_id, list_id, opts)
      return nil
    end

    # Invite a list to join the admin&#39;s social prompt team
    # Invite to Social Prompt Team
    # @param team_id The team id
    # @param list_id List to invite to the social prompt team.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def invite_to_social_prompt_team_with_http_info(team_id, list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.invite_to_social_prompt_team ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.invite_to_social_prompt_team"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling TeamsApi.invite_to_social_prompt_team"
      end
      # resource path
      local_var_path = "/teams/prompt/invite"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["teamId"] = team_id
      form_params["listId"] = list_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#invite_to_social_prompt_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Jericho send.
    # Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
    # @param config JSON representing a Jericho configuration
    # @param team_id The ID of the team.
    # @param [Hash] opts the optional parameters
    # @return [JerichoConfiguration]
    def queue_jericho_send(config, team_id, opts = {})
      data, _status_code, _headers = queue_jericho_send_with_http_info(config, team_id, opts)
      return data
    end

    # Creates a Jericho send.
    # Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
    # @param config JSON representing a Jericho configuration
    # @param team_id The ID of the team.
    # @param [Hash] opts the optional parameters
    # @return [Array<(JerichoConfiguration, Fixnum, Hash)>] JerichoConfiguration data, response status code and response headers
    def queue_jericho_send_with_http_info(config, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.queue_jericho_send ..."
      end
      # verify the required parameter 'config' is set
      if @api_client.config.client_side_validation && config.nil?
        fail ArgumentError, "Missing the required parameter 'config' when calling TeamsApi.queue_jericho_send"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.queue_jericho_send"
      end
      # resource path
      local_var_path = "/team/{teamId}/jericho".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(config)
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JerichoConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#queue_jericho_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove Member from Team
    # Removes a member from a team.
    # @param team_id The team id
    # @param user_id The user id of the member being removed.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def remove_member_from_team(team_id, user_id, opts = {})
      data, _status_code, _headers = remove_member_from_team_with_http_info(team_id, user_id, opts)
      return data
    end

    # Remove Member from Team
    # Removes a member from a team.
    # @param team_id The team id
    # @param user_id The user id of the member being removed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def remove_member_from_team_with_http_info(team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.remove_member_from_team ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.remove_member_from_team"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TeamsApi.remove_member_from_team"
      end
      # resource path
      local_var_path = "/team/{teamId}/member/{userId}".sub('{' + 'teamId' + '}', team_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#remove_member_from_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resend invite
    # Resend invitation to a member of a team
    # @param team_id The team id
    # @param member_user_id The user id of the member being resent an invitation.
    # @param [Hash] opts the optional parameters
    # @return [TeamPublicRepresentation]
    def resend_team_member_invitation(team_id, member_user_id, opts = {})
      data, _status_code, _headers = resend_team_member_invitation_with_http_info(team_id, member_user_id, opts)
      return data
    end

    # Resend invite
    # Resend invitation to a member of a team
    # @param team_id The team id
    # @param member_user_id The user id of the member being resent an invitation.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TeamPublicRepresentation, Fixnum, Hash)>] TeamPublicRepresentation data, response status code and response headers
    def resend_team_member_invitation_with_http_info(team_id, member_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.resend_team_member_invitation ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.resend_team_member_invitation"
      end
      # verify the required parameter 'member_user_id' is set
      if @api_client.config.client_side_validation && member_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'member_user_id' when calling TeamsApi.resend_team_member_invitation"
      end
      # resource path
      local_var_path = "/team/{teamId}/{memberUserId}/rewelcome".sub('{' + 'teamId' + '}', team_id.to_s).sub('{' + 'memberUserId' + '}', member_user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TeamPublicRepresentation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#resend_team_member_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the Jericho Prompt Settings
    # Updates the prompt settings based on the original email id
    # @param team_id The team id
    # @param jericho_id ID of the Jericho job
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_jericho_prompt_send(team_id, jericho_id, opts = {})
      update_jericho_prompt_send_with_http_info(team_id, jericho_id, opts)
      return nil
    end

    # Updates the Jericho Prompt Settings
    # Updates the prompt settings based on the original email id
    # @param team_id The team id
    # @param jericho_id ID of the Jericho job
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_jericho_prompt_send_with_http_info(team_id, jericho_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.update_jericho_prompt_send ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.update_jericho_prompt_send"
      end
      # verify the required parameter 'jericho_id' is set
      if @api_client.config.client_side_validation && jericho_id.nil?
        fail ArgumentError, "Missing the required parameter 'jericho_id' when calling TeamsApi.update_jericho_prompt_send"
      end
      # resource path
      local_var_path = "/team/{teamId}/jericho/{jerichoId}".sub('{' + 'teamId' + '}', team_id.to_s).sub('{' + 'jerichoId' + '}', jericho_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#update_jericho_prompt_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a team
    # Update fields on a team
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of the team
    # @option opts [String] :state The status of the login permissions
    # @option opts [BOOLEAN] :subteams_can_add_members Updates subteam member adding setting on group
    # @return [TeamPublicRepresentation]
    def update_team(team_id, opts = {})
      data, _status_code, _headers = update_team_with_http_info(team_id, opts)
      return data
    end

    # Update a team
    # Update fields on a team
    # @param team_id The team id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name The name of the team
    # @option opts [String] :state The status of the login permissions
    # @option opts [BOOLEAN] :subteams_can_add_members Updates subteam member adding setting on group
    # @return [Array<(TeamPublicRepresentation, Fixnum, Hash)>] TeamPublicRepresentation data, response status code and response headers
    def update_team_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.update_team ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.update_team"
      end
      # resource path
      local_var_path = "/team/{teamId}".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["name"] = opts[:'name'] if !opts[:'name'].nil?
      form_params["state"] = opts[:'state'] if !opts[:'state'].nil?
      form_params["subteamsCanAddMembers"] = opts[:'subteams_can_add_members'] if !opts[:'subteams_can_add_members'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TeamPublicRepresentation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#update_team\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Member of Team
    # Updates a member of a team
    # @param team_id The team id
    # @param user_id The user id of the member being added to the team.
    # @param admin Set if the user is an admin of this team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :permission_suite_id Set if the user is an admin of this team.
    # @return [nil]
    def update_team_member(team_id, user_id, admin, opts = {})
      update_team_member_with_http_info(team_id, user_id, admin, opts)
      return nil
    end

    # Update Member of Team
    # Updates a member of a team
    # @param team_id The team id
    # @param user_id The user id of the member being added to the team.
    # @param admin Set if the user is an admin of this team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :permission_suite_id Set if the user is an admin of this team.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_team_member_with_http_info(team_id, user_id, admin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.update_team_member ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.update_team_member"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling TeamsApi.update_team_member"
      end
      # verify the required parameter 'admin' is set
      if @api_client.config.client_side_validation && admin.nil?
        fail ArgumentError, "Missing the required parameter 'admin' when calling TeamsApi.update_team_member"
      end
      # resource path
      local_var_path = "/team/{teamId}/member".sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["userId"] = user_id
      form_params["admin"] = admin
      form_params["permissionSuiteId"] = opts[:'permission_suite_id'] if !opts[:'permission_suite_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#update_team_member\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class TeamsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Cancel a Jericho Send
    # Cancels a scheduled Jericho send from being sent.
    # @param jericho_id ID of the Jericho Job to cancel
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel_jericho_send(jericho_id, opts = {})
      cancel_jericho_send_with_http_info(jericho_id, opts)
      return nil
    end

    # Cancel a Jericho Send
    # Cancels a scheduled Jericho send from being sent.
    # @param jericho_id ID of the Jericho Job to cancel
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_jericho_send_with_http_info(jericho_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.cancel_jericho_send ..."
      end
      # verify the required parameter 'jericho_id' is set
      fail ArgumentError, "Missing the required parameter 'jericho_id' when calling TeamsApi.cancel_jericho_send" if jericho_id.nil?
      # resource path
      local_var_path = "/team/{teamId}/jericho/{jerichoId}".sub('{format}','json').sub('{' + 'jerichoId' + '}', jericho_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#cancel_jericho_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists team assets
    # Returns a collection of assets
    # @param asset_type The type of assets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The team containing the assets.
    # @option opts [String] :auto_tag_name The auto tag name containing the assets.
    # @option opts [String] :page_size The number of items to retrieve in a single db query.
    # @option opts [String] :page Zero-based index of the page of data to retrieve from the db.
    # @option opts [String] :search Search words.
    # @return [InlineResponse200]
    def get_client_group_assets(asset_type, opts = {})
      data, _status_code, _headers = get_client_group_assets_with_http_info(asset_type, opts)
      return data
    end

    # Lists team assets
    # Returns a collection of assets
    # @param asset_type The type of assets.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The team containing the assets.
    # @option opts [String] :auto_tag_name The auto tag name containing the assets.
    # @option opts [String] :page_size The number of items to retrieve in a single db query.
    # @option opts [String] :page Zero-based index of the page of data to retrieve from the db.
    # @option opts [String] :search Search words.
    # @return [Array<(InlineResponse200, Fixnum, Hash)>] InlineResponse200 data, response status code and response headers
    def get_client_group_assets_with_http_info(asset_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_client_group_assets ..."
      end
      # verify the required parameter 'asset_type' is set
      fail ArgumentError, "Missing the required parameter 'asset_type' when calling TeamsApi.get_client_group_assets" if asset_type.nil?
      # verify enum value
      unless ['email', 'video'].include?(asset_type)
        fail ArgumentError, "invalid value for 'asset_type', must be one of email, video"
      end
      # resource path
      local_var_path = "/team/assets/".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'assetType'] = asset_type
      query_params[:'teamId'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'autoTagName'] = opts[:'auto_tag_name'] if !opts[:'auto_tag_name'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InlineResponse200')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_client_group_assets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Jericho Sends
    # Lists Jericho sends, both pending and sent.
    # @param team_id The team whose Jericho sends you wish to see.
    # @param [Hash] opts the optional parameters
    # @return [Array<JerichoConfiguration>]
    def get_jericho_sends(team_id, opts = {})
      data, _status_code, _headers = get_jericho_sends_with_http_info(team_id, opts)
      return data
    end

    # List Jericho Sends
    # Lists Jericho sends, both pending and sent.
    # @param team_id The team whose Jericho sends you wish to see.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<JerichoConfiguration>, Fixnum, Hash)>] Array<JerichoConfiguration> data, response status code and response headers
    def get_jericho_sends_with_http_info(team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_jericho_sends ..."
      end
      # verify the required parameter 'team_id' is set
      fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_jericho_sends" if team_id.nil?
      # resource path
      local_var_path = "/team/{teamId}/jericho".sub('{format}','json').sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<JerichoConfiguration>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_jericho_sends\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets Jericho performance statistics
    # Returns an aggregate view of the performance of a Jericho send
    # @param jericho_id ID of the Jericho job
    # @param team_id ID of team through which Jericho was sent
    # @param [Hash] opts the optional parameters
    # @return [JerichoPerformance]
    def get_jericho_stats(jericho_id, team_id, opts = {})
      data, _status_code, _headers = get_jericho_stats_with_http_info(jericho_id, team_id, opts)
      return data
    end

    # Gets Jericho performance statistics
    # Returns an aggregate view of the performance of a Jericho send
    # @param jericho_id ID of the Jericho job
    # @param team_id ID of team through which Jericho was sent
    # @param [Hash] opts the optional parameters
    # @return [Array<(JerichoPerformance, Fixnum, Hash)>] JerichoPerformance data, response status code and response headers
    def get_jericho_stats_with_http_info(jericho_id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.get_jericho_stats ..."
      end
      # verify the required parameter 'jericho_id' is set
      fail ArgumentError, "Missing the required parameter 'jericho_id' when calling TeamsApi.get_jericho_stats" if jericho_id.nil?
      # verify the required parameter 'team_id' is set
      fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.get_jericho_stats" if team_id.nil?
      # resource path
      local_var_path = "/team/{teamId}/jericho/{jerichoId}/performance".sub('{format}','json').sub('{' + 'jerichoId' + '}', jericho_id.to_s).sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JerichoPerformance')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#get_jericho_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Jericho send.
    # Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
    # @param config JSON representing a Jericho configuration
    # @param team_id The ID of the team.
    # @param [Hash] opts the optional parameters
    # @return [JerichoConfiguration]
    def queue_jericho_send(config, team_id, opts = {})
      data, _status_code, _headers = queue_jericho_send_with_http_info(config, team_id, opts)
      return data
    end

    # Creates a Jericho send.
    # Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
    # @param config JSON representing a Jericho configuration
    # @param team_id The ID of the team.
    # @param [Hash] opts the optional parameters
    # @return [Array<(JerichoConfiguration, Fixnum, Hash)>] JerichoConfiguration data, response status code and response headers
    def queue_jericho_send_with_http_info(config, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TeamsApi.queue_jericho_send ..."
      end
      # verify the required parameter 'config' is set
      fail ArgumentError, "Missing the required parameter 'config' when calling TeamsApi.queue_jericho_send" if config.nil?
      # verify the required parameter 'team_id' is set
      fail ArgumentError, "Missing the required parameter 'team_id' when calling TeamsApi.queue_jericho_send" if team_id.nil?
      # resource path
      local_var_path = "/team/{teamId}/jericho".sub('{format}','json').sub('{' + 'teamId' + '}', team_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(config)
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'JerichoConfiguration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamsApi#queue_jericho_send\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

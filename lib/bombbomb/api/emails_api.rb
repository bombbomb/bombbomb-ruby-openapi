=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.25797

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class EmailsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an Email with Printing Press
    # Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
    # @param template_id The template id to be printed.
    # @param content The content of the email.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_id The email id to be printed to.
    # @option opts [String] :video_id A video to replace video place holders with.
    # @option opts [String] :subject_line The subject line to be printed.
    # @return [nil]
    def create_printing_press_email(template_id, content, opts = {})
      create_printing_press_email_with_http_info(template_id, content, opts)
      return nil
    end

    # Create an Email with Printing Press
    # Prints an email using the template id and content to the users account.If a video id is included, it will replace any video placeholders with that video.
    # @param template_id The template id to be printed.
    # @param content The content of the email.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_id The email id to be printed to.
    # @option opts [String] :video_id A video to replace video place holders with.
    # @option opts [String] :subject_line The subject line to be printed.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_printing_press_email_with_http_info(template_id, content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsApi.create_printing_press_email ..."
      end
      # verify the required parameter 'template_id' is set
      fail ArgumentError, "Missing the required parameter 'template_id' when calling EmailsApi.create_printing_press_email" if template_id.nil?
      # verify the required parameter 'content' is set
      fail ArgumentError, "Missing the required parameter 'content' when calling EmailsApi.create_printing_press_email" if content.nil?
      # resource path
      local_var_path = "/emails/print".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["templateId"] = template_id
      form_params["content"] = content
      form_params["emailId"] = opts[:'email_id'] if !opts[:'email_id'].nil?
      form_params["videoId"] = opts[:'video_id'] if !opts[:'video_id'].nil?
      form_params["subjectLine"] = opts[:'subject_line'] if !opts[:'subject_line'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsApi#create_printing_press_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all user templates
    # Get all templates accessible to the current user
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :quick_send_only Whether to return only quick send templates.
    # @return [nil]
    def get_all_templates_for_current_user(opts = {})
      get_all_templates_for_current_user_with_http_info(opts)
      return nil
    end

    # Get all user templates
    # Get all templates accessible to the current user
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :quick_send_only Whether to return only quick send templates.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_all_templates_for_current_user_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsApi.get_all_templates_for_current_user ..."
      end
      # resource path
      local_var_path = "/emails/templates".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'quickSendOnly'] = opts[:'quick_send_only'] if !opts[:'quick_send_only'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsApi#get_all_templates_for_current_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Email Tracking
    # Get Tracking data for all sends of an Email
    # @param email_id ID of the email
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id ID of the Job (or null for all jobs)
    # @return [nil]
    def get_email_tracking(email_id, opts = {})
      get_email_tracking_with_http_info(email_id, opts)
      return nil
    end

    # Get Email Tracking
    # Get Tracking data for all sends of an Email
    # @param email_id ID of the email
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id ID of the Job (or null for all jobs)
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_email_tracking_with_http_info(email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsApi.get_email_tracking ..."
      end
      # verify the required parameter 'email_id' is set
      fail ArgumentError, "Missing the required parameter 'email_id' when calling EmailsApi.get_email_tracking" if email_id.nil?
      # resource path
      local_var_path = "/emails/{emailId}/tracking".sub('{format}','json').sub('{' + 'emailId' + '}', email_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'jobId'] = opts[:'job_id'] if !opts[:'job_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsApi#get_email_tracking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Email Tracking Interactions
    # Get Contact detail interactions for an Email
    # @param email_id ID of the email
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id ID of the Job (or null for all jobs)
    # @option opts [String] :interaction_type Interaction type to order and filter by
    # @option opts [String] :search_term Search term to filer by
    # @return [nil]
    def get_email_tracking_interactions(email_id, opts = {})
      get_email_tracking_interactions_with_http_info(email_id, opts)
      return nil
    end

    # Get Email Tracking Interactions
    # Get Contact detail interactions for an Email
    # @param email_id ID of the email
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id ID of the Job (or null for all jobs)
    # @option opts [String] :interaction_type Interaction type to order and filter by
    # @option opts [String] :search_term Search term to filer by
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_email_tracking_interactions_with_http_info(email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsApi.get_email_tracking_interactions ..."
      end
      # verify the required parameter 'email_id' is set
      fail ArgumentError, "Missing the required parameter 'email_id' when calling EmailsApi.get_email_tracking_interactions" if email_id.nil?
      # resource path
      local_var_path = "/emails/{emailId}/tracking/interactions".sub('{format}','json').sub('{' + 'emailId' + '}', email_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'jobId'] = opts[:'job_id'] if !opts[:'job_id'].nil?
      query_params[:'interactionType'] = opts[:'interaction_type'] if !opts[:'interaction_type'].nil?
      query_params[:'searchTerm'] = opts[:'search_term'] if !opts[:'search_term'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsApi#get_email_tracking_interactions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Hourly Email Tracking
    # Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
    # @param email_id ID of the email
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id ID of the Job (or null for all jobs)
    # @option opts [String] :interaction_type Interaction type to filter by
    # @return [nil]
    def get_hourly_email_tracking(email_id, opts = {})
      get_hourly_email_tracking_with_http_info(email_id, opts)
      return nil
    end

    # Get Hourly Email Tracking
    # Get Tracking data for an Email,             broken down by the hour and filterable by an Interaction type
    # @param email_id ID of the email
    # @param [Hash] opts the optional parameters
    # @option opts [String] :job_id ID of the Job (or null for all jobs)
    # @option opts [String] :interaction_type Interaction type to filter by
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_hourly_email_tracking_with_http_info(email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsApi.get_hourly_email_tracking ..."
      end
      # verify the required parameter 'email_id' is set
      fail ArgumentError, "Missing the required parameter 'email_id' when calling EmailsApi.get_hourly_email_tracking" if email_id.nil?
      # resource path
      local_var_path = "/emails/{emailId}/tracking/hourly".sub('{format}','json').sub('{' + 'emailId' + '}', email_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'jobId'] = opts[:'job_id'] if !opts[:'job_id'].nil?
      query_params[:'interactionType'] = opts[:'interaction_type'] if !opts[:'interaction_type'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsApi#get_hourly_email_tracking\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all quicksend templates
    # Get all quicksend templates accessible to the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_quick_send_templates(opts = {})
      get_quick_send_templates_with_http_info(opts)
      return nil
    end

    # Get all quicksend templates
    # Get all quicksend templates accessible to the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_quick_send_templates_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsApi.get_quick_send_templates ..."
      end
      # resource path
      local_var_path = "/emails/quicksend/templates".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsApi#get_quick_send_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a quicksend email
    # Send a quicksend video email to the list or users provided.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :video_id A guid id for the video.
    # @option opts [String] :email_addresses A semi-colon separated list of email addresses to send to.
    # @option opts [String] :subject Subject line for the email.
    # @option opts [String] :message Message for the body of the email.
    # @option opts [String] :list_ids An array of list ids
    # @option opts [Integer] :scheduled_send_timestamp When to schedule the send (seconds since epoch). null value means send immediately.
    # @option opts [String] :extended_properties Bool value that when checked will send back both emailId as well as extra properties
    # @option opts [String] :template_id Id of a template to use for this send. A null value means use the default for this user.
    # @option opts [String] :strip_html remove HTML elements
    # @return [nil]
    def video_quick_sender(opts = {})
      video_quick_sender_with_http_info(opts)
      return nil
    end

    # Send a quicksend email
    # Send a quicksend video email to the list or users provided.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :video_id A guid id for the video.
    # @option opts [String] :email_addresses A semi-colon separated list of email addresses to send to.
    # @option opts [String] :subject Subject line for the email.
    # @option opts [String] :message Message for the body of the email.
    # @option opts [String] :list_ids An array of list ids
    # @option opts [Integer] :scheduled_send_timestamp When to schedule the send (seconds since epoch). null value means send immediately.
    # @option opts [String] :extended_properties Bool value that when checked will send back both emailId as well as extra properties
    # @option opts [String] :template_id Id of a template to use for this send. A null value means use the default for this user.
    # @option opts [String] :strip_html remove HTML elements
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def video_quick_sender_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsApi.video_quick_sender ..."
      end
      # resource path
      local_var_path = "/emails/quicksend".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["videoId"] = opts[:'video_id'] if !opts[:'video_id'].nil?
      form_params["emailAddresses"] = opts[:'email_addresses'] if !opts[:'email_addresses'].nil?
      form_params["subject"] = opts[:'subject'] if !opts[:'subject'].nil?
      form_params["message"] = opts[:'message'] if !opts[:'message'].nil?
      form_params["listIds"] = opts[:'list_ids'] if !opts[:'list_ids'].nil?
      form_params["scheduledSendTimestamp"] = opts[:'scheduled_send_timestamp'] if !opts[:'scheduled_send_timestamp'].nil?
      form_params["extendedProperties"] = opts[:'extended_properties'] if !opts[:'extended_properties'].nil?
      form_params["templateId"] = opts[:'template_id'] if !opts[:'template_id'].nil?
      form_params["stripHTML"] = opts[:'strip_html'] if !opts[:'strip_html'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsApi#video_quick_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

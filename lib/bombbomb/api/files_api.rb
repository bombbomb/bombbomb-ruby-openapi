=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete file
    # Deletes a users file
    # @param doc_id Id of document
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def doc_host_delete(doc_id, opts = {})
      doc_host_delete_with_http_info(doc_id, opts)
      return nil
    end

    # Delete file
    # Deletes a users file
    # @param doc_id Id of document
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def doc_host_delete_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.doc_host_delete ..."
      end
      # verify the required parameter 'doc_id' is set
      fail ArgumentError, "Missing the required parameter 'doc_id' when calling FilesApi.doc_host_delete" if doc_id.nil?
      # resource path
      local_var_path = "/files/{docId}".sub('{format}','json').sub('{' + 'docId' + '}', doc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#doc_host_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get file
    # Get a single file by id
    # @param doc_id Id of document
    # @param [Hash] opts the optional parameters
    # @return [HostedDoc]
    def doc_host_get(doc_id, opts = {})
      data, _status_code, _headers = doc_host_get_with_http_info(doc_id, opts)
      return data
    end

    # Get file
    # Get a single file by id
    # @param doc_id Id of document
    # @param [Hash] opts the optional parameters
    # @return [Array<(HostedDoc, Fixnum, Hash)>] HostedDoc data, response status code and response headers
    def doc_host_get_with_http_info(doc_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.doc_host_get ..."
      end
      # verify the required parameter 'doc_id' is set
      fail ArgumentError, "Missing the required parameter 'doc_id' when calling FilesApi.doc_host_get" if doc_id.nil?
      # resource path
      local_var_path = "/files/{docId}".sub('{format}','json').sub('{' + 'docId' + '}', doc_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HostedDoc')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#doc_host_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all files
    # List all uploaded user files
    # @param [Hash] opts the optional parameters
    # @return [Array<HostedDoc>]
    def doc_host_list(opts = {})
      data, _status_code, _headers = doc_host_list_with_http_info(opts)
      return data
    end

    # List all files
    # List all uploaded user files
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<HostedDoc>, Fixnum, Hash)>] Array<HostedDoc> data, response status code and response headers
    def doc_host_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.doc_host_list ..."
      end
      # resource path
      local_var_path = "/files".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<HostedDoc>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#doc_host_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a file
    # Upload a new file
    # @param file The file being uploaded
    # @param [Hash] opts the optional parameters
    # @return [Array<HostedDoc>]
    def doc_host_upload_v2(file, opts = {})
      data, _status_code, _headers = doc_host_upload_v2_with_http_info(file, opts)
      return data
    end

    # Upload a file
    # Upload a new file
    # @param file The file being uploaded
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<HostedDoc>, Fixnum, Hash)>] Array<HostedDoc> data, response status code and response headers
    def doc_host_upload_v2_with_http_info(file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.doc_host_upload_v2 ..."
      end
      # verify the required parameter 'file' is set
      fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.doc_host_upload_v2" if file.nil?
      # resource path
      local_var_path = "/files".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["file"] = file

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<HostedDoc>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#doc_host_upload_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get paged hosted images
    # Get a specific page of uploaded images available to the user.
    # @param page_size The number of items to retrieve in a single db query.
    # @param page Zero-based index of the page of data to retrieve from the db.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Filter results with names that match the search term.
    # @return [nil]
    def get_hosted_images_paged(page_size, page, opts = {})
      get_hosted_images_paged_with_http_info(page_size, page, opts)
      return nil
    end

    # Get paged hosted images
    # Get a specific page of uploaded images available to the user.
    # @param page_size The number of items to retrieve in a single db query.
    # @param page Zero-based index of the page of data to retrieve from the db.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :search Filter results with names that match the search term.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_hosted_images_paged_with_http_info(page_size, page, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.get_hosted_images_paged ..."
      end
      # verify the required parameter 'page_size' is set
      fail ArgumentError, "Missing the required parameter 'page_size' when calling FilesApi.get_hosted_images_paged" if page_size.nil?
      # verify the required parameter 'page' is set
      fail ArgumentError, "Missing the required parameter 'page' when calling FilesApi.get_hosted_images_paged" if page.nil?
      # resource path
      local_var_path = "/files/images/paged".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = page_size
      query_params[:'page'] = page
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#get_hosted_images_paged\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

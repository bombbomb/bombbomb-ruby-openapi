=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.24005

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get account details.
    # Get the details of the user's account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email Your login email address
    # @option opts [String] :pw Your password
    # @option opts [String] :api_key Your Api Key
    # @return [nil]
    def account_details(opts = {})
      account_details_with_http_info(opts)
      return nil
    end

    # Get account details.
    # Get the details of the user&#39;s account.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email Your login email address
    # @option opts [String] :pw Your password
    # @option opts [String] :api_key Your Api Key
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.account_details ..."
      end
      # resource path
      local_var_path = "/accounts".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'pw'] = opts[:'pw'] if !opts[:'pw'].nil?
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Account
    # Creates a new BombBomb account. This method is currently only available to paid seat admins.
    # @param team_id The team id
    # @param first_name First name of the user.
    # @param last_name Last name of the user.
    # @param email_address Email address of the user.
    # @param company_name Company of the user.
    # @param phone Phone number of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country of the user.
    # @option opts [String] :industry Industry of the user.
    # @option opts [String] :address Street Address of the user.
    # @option opts [String] :city City of the user.
    # @option opts [String] :postal_code Postal/Zip code of the user.
    # @return [String]
    def create_account(team_id, first_name, last_name, email_address, company_name, phone, opts = {})
      data, _status_code, _headers = create_account_with_http_info(team_id, first_name, last_name, email_address, company_name, phone, opts)
      return data
    end

    # Create Account
    # Creates a new BombBomb account. This method is currently only available to paid seat admins.
    # @param team_id The team id
    # @param first_name First name of the user.
    # @param last_name Last name of the user.
    # @param email_address Email address of the user.
    # @param company_name Company of the user.
    # @param phone Phone number of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country of the user.
    # @option opts [String] :industry Industry of the user.
    # @option opts [String] :address Street Address of the user.
    # @option opts [String] :city City of the user.
    # @option opts [String] :postal_code Postal/Zip code of the user.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_account_with_http_info(team_id, first_name, last_name, email_address, company_name, phone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_account ..."
      end
      # verify the required parameter 'team_id' is set
      fail ArgumentError, "Missing the required parameter 'team_id' when calling AccountsApi.create_account" if team_id.nil?
      # verify the required parameter 'first_name' is set
      fail ArgumentError, "Missing the required parameter 'first_name' when calling AccountsApi.create_account" if first_name.nil?
      # verify the required parameter 'last_name' is set
      fail ArgumentError, "Missing the required parameter 'last_name' when calling AccountsApi.create_account" if last_name.nil?
      # verify the required parameter 'email_address' is set
      fail ArgumentError, "Missing the required parameter 'email_address' when calling AccountsApi.create_account" if email_address.nil?
      # verify the required parameter 'company_name' is set
      fail ArgumentError, "Missing the required parameter 'company_name' when calling AccountsApi.create_account" if company_name.nil?
      # verify the required parameter 'phone' is set
      fail ArgumentError, "Missing the required parameter 'phone' when calling AccountsApi.create_account" if phone.nil?
      # resource path
      local_var_path = "/accounts".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["teamId"] = team_id
      form_params["firstName"] = first_name
      form_params["lastName"] = last_name
      form_params["emailAddress"] = email_address
      form_params["companyName"] = company_name
      form_params["phone"] = phone
      form_params["country"] = opts[:'country'] if !opts[:'country'].nil?
      form_params["industry"] = opts[:'industry'] if !opts[:'industry'].nil?
      form_params["address"] = opts[:'address'] if !opts[:'address'].nil?
      form_params["city"] = opts[:'city'] if !opts[:'city'].nil?
      form_params["postalCode"] = opts[:'postal_code'] if !opts[:'postal_code'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if subscription purchase allowed.
    # Check whether the user can purchase a subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email Your login email address
    # @option opts [String] :pw Your password
    # @option opts [String] :api_key Your Api Key
    # @return [nil]
    def subscription_purchase_allowed(opts = {})
      subscription_purchase_allowed_with_http_info(opts)
      return nil
    end

    # Check if subscription purchase allowed.
    # Check whether the user can purchase a subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email Your login email address
    # @option opts [String] :pw Your password
    # @option opts [String] :api_key Your Api Key
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def subscription_purchase_allowed_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.subscription_purchase_allowed ..."
      end
      # resource path
      local_var_path = "/accounts/purchaseable".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'pw'] = opts[:'pw'] if !opts[:'pw'].nil?
      query_params[:'api_key'] = opts[:'api_key'] if !opts[:'api_key'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#subscription_purchase_allowed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.831

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module BombBomb
  class AccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get account details.
    # Get the details of the user's account.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def account_details(opts = {})
      account_details_with_http_info(opts)
      return nil
    end

    # Get account details.
    # Get the details of the user&#39;s account.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def account_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.account_details ..."
      end
      # resource path
      local_var_path = "/accounts"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#account_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Account
    # Creates a new BombBomb account. This method is currently only available to paid seat admins.
    # @param team_id The team id
    # @param first_name First name of the user.
    # @param last_name Last name of the user.
    # @param email_address Email address of the user.
    # @param company_name Company of the user.
    # @param phone Phone number of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country of the user.
    # @option opts [String] :industry Industry of the user.
    # @option opts [String] :address Street Address of the user.
    # @option opts [String] :city City of the user.
    # @option opts [String] :postal_code Postal/Zip code of the user.
    # @option opts [BOOLEAN] :prevent_welcome_email prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39;
    # @return [String]
    def create_account(team_id, first_name, last_name, email_address, company_name, phone, opts = {})
      data, _status_code, _headers = create_account_with_http_info(team_id, first_name, last_name, email_address, company_name, phone, opts)
      return data
    end

    # Create Account
    # Creates a new BombBomb account. This method is currently only available to paid seat admins.
    # @param team_id The team id
    # @param first_name First name of the user.
    # @param last_name Last name of the user.
    # @param email_address Email address of the user.
    # @param company_name Company of the user.
    # @param phone Phone number of the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :country Country of the user.
    # @option opts [String] :industry Industry of the user.
    # @option opts [String] :address Street Address of the user.
    # @option opts [String] :city City of the user.
    # @option opts [String] :postal_code Postal/Zip code of the user.
    # @option opts [BOOLEAN] :prevent_welcome_email prevent an email with login credentials from being sent to the new account. must be set to &#39;true&#39;
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def create_account_with_http_info(team_id, first_name, last_name, email_address, company_name, phone, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.create_account ..."
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AccountsApi.create_account"
      end
      # verify the required parameter 'first_name' is set
      if @api_client.config.client_side_validation && first_name.nil?
        fail ArgumentError, "Missing the required parameter 'first_name' when calling AccountsApi.create_account"
      end
      # verify the required parameter 'last_name' is set
      if @api_client.config.client_side_validation && last_name.nil?
        fail ArgumentError, "Missing the required parameter 'last_name' when calling AccountsApi.create_account"
      end
      # verify the required parameter 'email_address' is set
      if @api_client.config.client_side_validation && email_address.nil?
        fail ArgumentError, "Missing the required parameter 'email_address' when calling AccountsApi.create_account"
      end
      # verify the required parameter 'company_name' is set
      if @api_client.config.client_side_validation && company_name.nil?
        fail ArgumentError, "Missing the required parameter 'company_name' when calling AccountsApi.create_account"
      end
      # verify the required parameter 'phone' is set
      if @api_client.config.client_side_validation && phone.nil?
        fail ArgumentError, "Missing the required parameter 'phone' when calling AccountsApi.create_account"
      end
      # resource path
      local_var_path = "/accounts"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["teamId"] = team_id
      form_params["firstName"] = first_name
      form_params["lastName"] = last_name
      form_params["emailAddress"] = email_address
      form_params["companyName"] = company_name
      form_params["phone"] = phone
      form_params["country"] = opts[:'country'] if !opts[:'country'].nil?
      form_params["industry"] = opts[:'industry'] if !opts[:'industry'].nil?
      form_params["address"] = opts[:'address'] if !opts[:'address'].nil?
      form_params["city"] = opts[:'city'] if !opts[:'city'].nil?
      form_params["postalCode"] = opts[:'postal_code'] if !opts[:'postal_code'].nil?
      form_params["preventWelcomeEmail"] = opts[:'prevent_welcome_email'] if !opts[:'prevent_welcome_email'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#create_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Client Statistics
    # Gets general statics for a Client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Client ID of the account to retrieve. Defaults to yourself.
    # @option opts [BOOLEAN] :refresh Boolean for whether data returned should be from cache or not.
    # @option opts [String] :statistic_values Array of data that should be returned, used exclusively for cacheless data
    # @return [nil]
    def get_client_statistics(opts = {})
      get_client_statistics_with_http_info(opts)
      return nil
    end

    # Get Client Statistics
    # Gets general statics for a Client
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Client ID of the account to retrieve. Defaults to yourself.
    # @option opts [BOOLEAN] :refresh Boolean for whether data returned should be from cache or not.
    # @option opts [String] :statistic_values Array of data that should be returned, used exclusively for cacheless data
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_client_statistics_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_client_statistics ..."
      end
      # resource path
      local_var_path = "/accounts/stats"

      # query parameters
      query_params = {}
      query_params[:'clientId'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'refresh'] = opts[:'refresh'] if !opts[:'refresh'].nil?
      query_params[:'statisticValues'] = opts[:'statistic_values'] if !opts[:'statistic_values'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_client_statistics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets user country
    # Gets the users country
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_user_country(opts = {})
      get_user_country_with_http_info(opts)
      return nil
    end

    # Gets user country
    # Gets the users country
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_user_country_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.get_user_country ..."
      end
      # resource path
      local_var_path = "/accounts/{clientId}/country"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#get_user_country\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset API key
    # Resets the current user's API key and returns the new key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def reset_api_key(opts = {})
      reset_api_key_with_http_info(opts)
      return nil
    end

    # Reset API key
    # Resets the current user&#39;s API key and returns the new key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def reset_api_key_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.reset_api_key ..."
      end
      # resource path
      local_var_path = "/accounts/apikey"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#reset_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if subscription purchase allowed.
    # Check whether the user can purchase a subscription.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def subscription_purchase_allowed(opts = {})
      subscription_purchase_allowed_with_http_info(opts)
      return nil
    end

    # Check if subscription purchase allowed.
    # Check whether the user can purchase a subscription.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def subscription_purchase_allowed_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.subscription_purchase_allowed ..."
      end
      # resource path
      local_var_path = "/accounts/purchaseable"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#subscription_purchase_allowed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add profile information.
    # Add profile information to this users account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_data Profile field information for the account
    # @return [nil]
    def update_profile_data(opts = {})
      update_profile_data_with_http_info(opts)
      return nil
    end

    # Add profile information.
    # Add profile information to this users account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :profile_data Profile field information for the account
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_profile_data_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AccountsApi.update_profile_data ..."
      end
      # resource path
      local_var_path = "/account/profile/"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["profileData"] = opts[:'profile_data'] if !opts[:'profile_data'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountsApi#update_profile_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

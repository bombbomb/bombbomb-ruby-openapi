=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.831

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module BombBomb
  class ListsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add list.
    # Add a list to the users account.
    # @param list_name Name of the new list being added
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_new_list(list_name, opts = {})
      add_new_list_with_http_info(list_name, opts)
      return nil
    end

    # Add list.
    # Add a list to the users account.
    # @param list_name Name of the new list being added
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_new_list_with_http_info(list_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.add_new_list ..."
      end
      # verify the required parameter 'list_name' is set
      if @api_client.config.client_side_validation && list_name.nil?
        fail ArgumentError, "Missing the required parameter 'list_name' when calling ListsApi.add_new_list"
      end
      # resource path
      local_var_path = "/lists/"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["listName"] = list_name

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#add_new_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear Contacts from List
    # Clears all contacts from a list.
    # @param list_id The list to be cleared.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def clear_list(list_id, opts = {})
      clear_list_with_http_info(list_id, opts)
      return nil
    end

    # Clear Contacts from List
    # Clears all contacts from a list.
    # @param list_id The list to be cleared.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def clear_list_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.clear_list ..."
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.clear_list"
      end
      # resource path
      local_var_path = "/lists/{listId}/clear".sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#clear_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy All Contacts from a List
    # Copy all contacts from a list.
    # @param from_list_id The list to be cleared.
    # @param list_id The list to be cleared.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def copy_list_contacts(from_list_id, list_id, opts = {})
      copy_list_contacts_with_http_info(from_list_id, list_id, opts)
      return nil
    end

    # Copy All Contacts from a List
    # Copy all contacts from a list.
    # @param from_list_id The list to be cleared.
    # @param list_id The list to be cleared.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def copy_list_contacts_with_http_info(from_list_id, list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.copy_list_contacts ..."
      end
      # verify the required parameter 'from_list_id' is set
      if @api_client.config.client_side_validation && from_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'from_list_id' when calling ListsApi.copy_list_contacts"
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.copy_list_contacts"
      end
      # resource path
      local_var_path = "/lists/{listId}/copy".sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["fromListId"] = from_list_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#copy_list_contacts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all Lists
    # Get all the lists for a specific user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_all_lists(opts = {})
      get_all_lists_with_http_info(opts)
      return nil
    end

    # Get all Lists
    # Get all the lists for a specific user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_all_lists_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.get_all_lists ..."
      end
      # resource path
      local_var_path = "/lists/"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#get_all_lists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Suppress All Contacts from List
    # Suppresses all contacts in a list.
    # @param list_id The list to be cleared.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def suppress_all_in_list(list_id, opts = {})
      suppress_all_in_list_with_http_info(list_id, opts)
      return nil
    end

    # Suppress All Contacts from List
    # Suppresses all contacts in a list.
    # @param list_id The list to be cleared.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def suppress_all_in_list_with_http_info(list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListsApi.suppress_all_in_list ..."
      end
      # verify the required parameter 'list_id' is set
      if @api_client.config.client_side_validation && list_id.nil?
        fail ArgumentError, "Missing the required parameter 'list_id' when calling ListsApi.suppress_all_in_list"
      end
      # resource path
      local_var_path = "/lists/{listId}/suppress".sub('{' + 'listId' + '}', list_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListsApi#suppress_all_in_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.22196

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class PromptsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a running Prompt Bot for a list
    # Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
    # @param list_id The list id to attach the bot to.
    # @param email_id The default email to use.
    # @param end_date The time frame to complete sending to the list.
    # @param prompt_subject The prompt subject.
    # @param prompt_body The prompt script.
    # @param bot_type_id The type of bot to create.
    # @param template_id The template used to create the email id.
    # @param [Hash] opts the optional parameters
    # @return [PromptBotBot]
    def create_prompt_bot(list_id, email_id, end_date, prompt_subject, prompt_body, bot_type_id, template_id, opts = {})
      data, _status_code, _headers = create_prompt_bot_with_http_info(list_id, email_id, end_date, prompt_subject, prompt_body, bot_type_id, template_id, opts)
      return data
    end

    # Create a running Prompt Bot for a list
    # Creates a Prompt Bot that sends emails to contacts on a list over the span of time defined.
    # @param list_id The list id to attach the bot to.
    # @param email_id The default email to use.
    # @param end_date The time frame to complete sending to the list.
    # @param prompt_subject The prompt subject.
    # @param prompt_body The prompt script.
    # @param bot_type_id The type of bot to create.
    # @param template_id The template used to create the email id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PromptBotBot, Fixnum, Hash)>] PromptBotBot data, response status code and response headers
    def create_prompt_bot_with_http_info(list_id, email_id, end_date, prompt_subject, prompt_body, bot_type_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.create_prompt_bot ..."
      end
      # verify the required parameter 'list_id' is set
      fail ArgumentError, "Missing the required parameter 'list_id' when calling PromptsApi.create_prompt_bot" if list_id.nil?
      # verify the required parameter 'email_id' is set
      fail ArgumentError, "Missing the required parameter 'email_id' when calling PromptsApi.create_prompt_bot" if email_id.nil?
      # verify the required parameter 'end_date' is set
      fail ArgumentError, "Missing the required parameter 'end_date' when calling PromptsApi.create_prompt_bot" if end_date.nil?
      # verify the required parameter 'prompt_subject' is set
      fail ArgumentError, "Missing the required parameter 'prompt_subject' when calling PromptsApi.create_prompt_bot" if prompt_subject.nil?
      # verify the required parameter 'prompt_body' is set
      fail ArgumentError, "Missing the required parameter 'prompt_body' when calling PromptsApi.create_prompt_bot" if prompt_body.nil?
      # verify the required parameter 'bot_type_id' is set
      fail ArgumentError, "Missing the required parameter 'bot_type_id' when calling PromptsApi.create_prompt_bot" if bot_type_id.nil?
      # verify the required parameter 'template_id' is set
      fail ArgumentError, "Missing the required parameter 'template_id' when calling PromptsApi.create_prompt_bot" if template_id.nil?
      # resource path
      local_var_path = "/prompts/bots".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["listId"] = list_id
      form_params["emailId"] = email_id
      form_params["endDate"] = end_date
      form_params["promptSubject"] = prompt_subject
      form_params["promptBody"] = prompt_body
      form_params["botTypeId"] = bot_type_id
      form_params["templateId"] = template_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PromptBotBot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#create_prompt_bot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Prompts user to send a video
    # Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
    # @param prompt The Video Email Prompt to be created
    # @param [Hash] opts the optional parameters
    # @return [VideoEmailPrompt]
    def create_video_email_prompt(prompt, opts = {})
      data, _status_code, _headers = create_video_email_prompt_with_http_info(prompt, opts)
      return data
    end

    # Prompts user to send a video
    # Sends the account holder an email prompting them to add a video to a scheduled outgoing message. Recipients, content and timing is all preset for the user.
    # @param prompt The Video Email Prompt to be created
    # @param [Hash] opts the optional parameters
    # @return [Array<(VideoEmailPrompt, Fixnum, Hash)>] VideoEmailPrompt data, response status code and response headers
    def create_video_email_prompt_with_http_info(prompt, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.create_video_email_prompt ..."
      end
      # verify the required parameter 'prompt' is set
      fail ArgumentError, "Missing the required parameter 'prompt' when calling PromptsApi.create_video_email_prompt" if prompt.nil?
      # resource path
      local_var_path = "/prompt".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(prompt)
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VideoEmailPrompt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#create_video_email_prompt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List pending prompts
    # Returns a list of prompts that have not been sent yet, and can still be customized.
    # @param [Hash] opts the optional parameters
    # @return [Array<VideoEmailPrompt>]
    def get_pending_video_email_prompts(opts = {})
      data, _status_code, _headers = get_pending_video_email_prompts_with_http_info(opts)
      return data
    end

    # List pending prompts
    # Returns a list of prompts that have not been sent yet, and can still be customized.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VideoEmailPrompt>, Fixnum, Hash)>] Array<VideoEmailPrompt> data, response status code and response headers
    def get_pending_video_email_prompts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.get_pending_video_email_prompts ..."
      end
      # resource path
      local_var_path = "/prompt/pending".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<VideoEmailPrompt>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#get_pending_video_email_prompts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Prompt Bots
    # Returns a list of all Prompt Bots for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<PromptBotBot>]
    def get_prompt_bots(opts = {})
      data, _status_code, _headers = get_prompt_bots_with_http_info(opts)
      return data
    end

    # List Prompt Bots
    # Returns a list of all Prompt Bots for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PromptBotBot>, Fixnum, Hash)>] Array<PromptBotBot> data, response status code and response headers
    def get_prompt_bots_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.get_prompt_bots ..."
      end
      # resource path
      local_var_path = "/prompts/bots".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<PromptBotBot>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#get_prompt_bots\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Prompt Campaigns
    # Returns a list of all Prompt Campaigns for the user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_prompt_campaigns(opts = {})
      get_prompt_campaigns_with_http_info(opts)
      return nil
    end

    # List Prompt Campaigns
    # Returns a list of all Prompt Campaigns for the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_prompt_campaigns_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.get_prompt_campaigns ..."
      end
      # resource path
      local_var_path = "/prompts/campaigns".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#get_prompt_campaigns\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a prompt
    # Gets a prompt
    # @param id The Id of the prompt
    # @param [Hash] opts the optional parameters
    # @return [VideoEmailPrompt]
    def get_video_email_prompt(id, opts = {})
      data, _status_code, _headers = get_video_email_prompt_with_http_info(id, opts)
      return data
    end

    # Gets a prompt
    # Gets a prompt
    # @param id The Id of the prompt
    # @param [Hash] opts the optional parameters
    # @return [Array<(VideoEmailPrompt, Fixnum, Hash)>] VideoEmailPrompt data, response status code and response headers
    def get_video_email_prompt_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.get_video_email_prompt ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling PromptsApi.get_video_email_prompt" if id.nil?
      # resource path
      local_var_path = "/prompt/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VideoEmailPrompt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#get_video_email_prompt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List prompts
    # Returns a list of all prompts.
    # @param [Hash] opts the optional parameters
    # @return [Array<VideoEmailPrompt>]
    def get_video_email_prompts(opts = {})
      data, _status_code, _headers = get_video_email_prompts_with_http_info(opts)
      return data
    end

    # List prompts
    # Returns a list of all prompts.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VideoEmailPrompt>, Fixnum, Hash)>] Array<VideoEmailPrompt> data, response status code and response headers
    def get_video_email_prompts_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.get_video_email_prompts ..."
      end
      # resource path
      local_var_path = "/prompt/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<VideoEmailPrompt>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#get_video_email_prompts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Respond to a prompt
    # Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
    # @param id The id of the prompt.
    # @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel
    # @param [Hash] opts the optional parameters
    # @option opts [String] :video_id The id of the video.
    # @option opts [String] :email_id The id of the video.
    # @return [VideoEmailPrompt]
    def respond_to_video_email_prompt(id, choice, opts = {})
      data, _status_code, _headers = respond_to_video_email_prompt_with_http_info(id, choice, opts)
      return data
    end

    # Respond to a prompt
    # Respond to a prompt by either adding a video, sending without a video or cancelling the prompt.
    # @param id The id of the prompt.
    # @param choice The users&#39; selection. Can be: WithVideo, WithEmail, Cancel
    # @param [Hash] opts the optional parameters
    # @option opts [String] :video_id The id of the video.
    # @option opts [String] :email_id The id of the video.
    # @return [Array<(VideoEmailPrompt, Fixnum, Hash)>] VideoEmailPrompt data, response status code and response headers
    def respond_to_video_email_prompt_with_http_info(id, choice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.respond_to_video_email_prompt ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling PromptsApi.respond_to_video_email_prompt" if id.nil?
      # verify the required parameter 'choice' is set
      fail ArgumentError, "Missing the required parameter 'choice' when calling PromptsApi.respond_to_video_email_prompt" if choice.nil?
      # verify enum value
      unless ['WithVideo', 'WithEmail', 'Cancel'].include?(choice)
        fail ArgumentError, "invalid value for 'choice', must be one of WithVideo, WithEmail, Cancel"
      end
      # resource path
      local_var_path = "/prompt/{id}/response".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["choice"] = choice
      form_params["videoId"] = opts[:'video_id'] if !opts[:'video_id'].nil?
      form_params["emailId"] = opts[:'email_id'] if !opts[:'email_id'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'VideoEmailPrompt')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#respond_to_video_email_prompt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Prompt Bot
    # Updates a Prompt Bot's settings.
    # @param id The bot id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_id The default email to use.
    # @option opts [String] :end_date The time frame to complete sending to the list.
    # @option opts [String] :status The status of the bot.
    # @return [PromptBotBot]
    def update_prompt_bot(id, opts = {})
      data, _status_code, _headers = update_prompt_bot_with_http_info(id, opts)
      return data
    end

    # Update Prompt Bot
    # Updates a Prompt Bot&#39;s settings.
    # @param id The bot id.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :email_id The default email to use.
    # @option opts [String] :end_date The time frame to complete sending to the list.
    # @option opts [String] :status The status of the bot.
    # @return [Array<(PromptBotBot, Fixnum, Hash)>] PromptBotBot data, response status code and response headers
    def update_prompt_bot_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.update_prompt_bot ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling PromptsApi.update_prompt_bot" if id.nil?
      # resource path
      local_var_path = "/prompts/bots/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["emailId"] = opts[:'email_id'] if !opts[:'email_id'].nil?
      form_params["endDate"] = opts[:'end_date'] if !opts[:'end_date'].nil?
      form_params["status"] = opts[:'status'] if !opts[:'status'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PromptBotBot')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#update_prompt_bot\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Prompt Campaign
    # Updates a Prompt Campaign's Settings
    # @param client_group_id The client group of the campaign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :branded_template_id The template to use for branded feel emails.
    # @option opts [String] :personal_template_id The template to use for personal feel emails.
    # @option opts [BOOLEAN] :enabled Set whether the user is able to start receiving prompts.
    # @return [nil]
    def update_prompt_campaign(client_group_id, opts = {})
      update_prompt_campaign_with_http_info(client_group_id, opts)
      return nil
    end

    # Update Prompt Campaign
    # Updates a Prompt Campaign&#39;s Settings
    # @param client_group_id The client group of the campaign.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :branded_template_id The template to use for branded feel emails.
    # @option opts [String] :personal_template_id The template to use for personal feel emails.
    # @option opts [BOOLEAN] :enabled Set whether the user is able to start receiving prompts.
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_prompt_campaign_with_http_info(client_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PromptsApi.update_prompt_campaign ..."
      end
      # verify the required parameter 'client_group_id' is set
      fail ArgumentError, "Missing the required parameter 'client_group_id' when calling PromptsApi.update_prompt_campaign" if client_group_id.nil?
      # resource path
      local_var_path = "/prompts/campaigns/{id}".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["clientGroupId"] = client_group_id
      form_params["brandedTemplateId"] = opts[:'branded_template_id'] if !opts[:'branded_template_id'].nil?
      form_params["personalTemplateId"] = opts[:'personal_template_id'] if !opts[:'personal_template_id'].nil?
      form_params["enabled"] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PromptsApi#update_prompt_campaign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

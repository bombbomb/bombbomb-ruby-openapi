=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.831

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module BombBomb
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add Webhook
    # Idempotently adds a Webhook url
    # @param hook_url The Url of your listener
    # @param [Hash] opts the optional parameters
    # @return [BBWebHook]
    def add_web_hook(hook_url, opts = {})
      data, _status_code, _headers = add_web_hook_with_http_info(hook_url, opts)
      return data
    end

    # Add Webhook
    # Idempotently adds a Webhook url
    # @param hook_url The Url of your listener
    # @param [Hash] opts the optional parameters
    # @return [Array<(BBWebHook, Fixnum, Hash)>] BBWebHook data, response status code and response headers
    def add_web_hook_with_http_info(hook_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.add_web_hook ..."
      end
      # verify the required parameter 'hook_url' is set
      if @api_client.config.client_side_validation && hook_url.nil?
        fail ArgumentError, "Missing the required parameter 'hook_url' when calling WebhooksApi.add_web_hook"
      end
      # resource path
      local_var_path = "/webhook"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["hookUrl"] = hook_url

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BBWebHook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#add_web_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes Webhook
    # Deletes a Webhook
    # @param hook_id The id of the webhook to delete
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_web_hook(hook_id, opts = {})
      data, _status_code, _headers = delete_web_hook_with_http_info(hook_id, opts)
      return data
    end

    # Deletes Webhook
    # Deletes a Webhook
    # @param hook_id The id of the webhook to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_web_hook_with_http_info(hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.delete_web_hook ..."
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling WebhooksApi.delete_web_hook"
      end
      # resource path
      local_var_path = "/webhook/{hookId}".sub('{' + 'hookId' + '}', hook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#delete_web_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists Webhooks
    # Lists all registered Webhooks
    # @param [Hash] opts the optional parameters
    # @return [Array<BBWebHook>]
    def get_web_hooks(opts = {})
      data, _status_code, _headers = get_web_hooks_with_http_info(opts)
      return data
    end

    # Lists Webhooks
    # Lists all registered Webhooks
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BBWebHook>, Fixnum, Hash)>] Array<BBWebHook> data, response status code and response headers
    def get_web_hooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.get_web_hooks ..."
      end
      # resource path
      local_var_path = "/webhook/"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BBWebHook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_web_hooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Describe WebHook Events
    # Returns example Webhook events for each kind of possible event.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def list_web_hook_events(opts = {})
      list_web_hook_events_with_http_info(opts)
      return nil
    end

    # Describe WebHook Events
    # Returns example Webhook events for each kind of possible event.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def list_web_hook_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.list_web_hook_events ..."
      end
      # resource path
      local_var_path = "/webhook/events"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#list_web_hook_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends test Webhook
    # Triggers a test webhook to be sent to your endpoints.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_webhook_example(opts = {})
      send_webhook_example_with_http_info(opts)
      return nil
    end

    # Sends test Webhook
    # Triggers a test webhook to be sent to your endpoints.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def send_webhook_example_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.send_webhook_example ..."
      end
      # resource path
      local_var_path = "/webhook/test"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#send_webhook_example\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

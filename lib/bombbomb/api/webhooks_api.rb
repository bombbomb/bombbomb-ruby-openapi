=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.21454

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class WebhooksApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Add Webhook
    # Idempotently adds a Webhook url
    # @param hook_url The Url of your listener
    # @param [Hash] opts the optional parameters
    # @return [BBWebHook]
    def add_web_hook(hook_url, opts = {})
      data, _status_code, _headers = add_web_hook_with_http_info(hook_url, opts)
      return data
    end

    # Add Webhook
    # Idempotently adds a Webhook url
    # @param hook_url The Url of your listener
    # @param [Hash] opts the optional parameters
    # @return [Array<(BBWebHook, Fixnum, Hash)>] BBWebHook data, response status code and response headers
    def add_web_hook_with_http_info(hook_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.add_web_hook ..."
      end
      # verify the required parameter 'hook_url' is set
      fail ArgumentError, "Missing the required parameter 'hook_url' when calling WebhooksApi.add_web_hook" if hook_url.nil?
      # resource path
      local_var_path = "/webhook".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["hookUrl"] = hook_url

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BBWebHook')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#add_web_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes Webhook
    # Deletes a Webhook
    # @param hook_id The id of the webhook to delete
    # @param [Hash] opts the optional parameters
    # @return [String]
    def delete_web_hook(hook_id, opts = {})
      data, _status_code, _headers = delete_web_hook_with_http_info(hook_id, opts)
      return data
    end

    # Deletes Webhook
    # Deletes a Webhook
    # @param hook_id The id of the webhook to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def delete_web_hook_with_http_info(hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.delete_web_hook ..."
      end
      # verify the required parameter 'hook_id' is set
      fail ArgumentError, "Missing the required parameter 'hook_id' when calling WebhooksApi.delete_web_hook" if hook_id.nil?
      # resource path
      local_var_path = "/webhook/{hookId}".sub('{format}','json').sub('{' + 'hookId' + '}', hook_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#delete_web_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists Webhooks
    # Lists all registered Webhooks
    # @param [Hash] opts the optional parameters
    # @return [Array<BBWebHook>]
    def get_web_hooks(opts = {})
      data, _status_code, _headers = get_web_hooks_with_http_info(opts)
      return data
    end

    # Lists Webhooks
    # Lists all registered Webhooks
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<BBWebHook>, Fixnum, Hash)>] Array<BBWebHook> data, response status code and response headers
    def get_web_hooks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.get_web_hooks ..."
      end
      # resource path
      local_var_path = "/webhook/".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<BBWebHook>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#get_web_hooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Describe WebHook Events
    # Returns example Webhook events for each kind of possible event.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def list_web_hook_events(opts = {})
      list_web_hook_events_with_http_info(opts)
      return nil
    end

    # Describe WebHook Events
    # Returns example Webhook events for each kind of possible event.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def list_web_hook_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.list_web_hook_events ..."
      end
      # resource path
      local_var_path = "/webhook/events".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#list_web_hook_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends test Webhook
    # Triggers a test webhook to be sent to your endpoints.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def send_webhook_example(opts = {})
      send_webhook_example_with_http_info(opts)
      return nil
    end

    # Sends test Webhook
    # Triggers a test webhook to be sent to your endpoints.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def send_webhook_example_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WebhooksApi.send_webhook_example ..."
      end
      # resource path
      local_var_path = "/webhook/test".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebhooksApi#send_webhook_example\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.25797

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class SocialsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Gets facebook pages
    # Gets facebook pages by client id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_facebook_pages(opts = {})
      get_facebook_pages_with_http_info(opts)
      return nil
    end

    # Gets facebook pages
    # Gets facebook pages by client id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_facebook_pages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_facebook_pages ..."
      end
      # resource path
      local_var_path = "/socials/facebook/pages".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_facebook_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the social email properties
    # Gets the social email properties
    # @param email_id This is the email Id for the email url
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_social_article_properties(email_id, opts = {})
      get_social_article_properties_with_http_info(email_id, opts)
      return nil
    end

    # Gets the social email properties
    # Gets the social email properties
    # @param email_id This is the email Id for the email url
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_article_properties_with_http_info(email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_article_properties ..."
      end
      # verify the required parameter 'email_id' is set
      fail ArgumentError, "Missing the required parameter 'email_id' when calling SocialsApi.get_social_article_properties" if email_id.nil?
      # resource path
      local_var_path = "/socials/properties".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'emailId'] = email_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_article_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get authorizations for all social integration
    # Get authorizations and autoshares for all social integration and has redirect for user to login
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_group_id ID of the client group association
    # @return [nil]
    def get_social_authorizations(opts = {})
      get_social_authorizations_with_http_info(opts)
      return nil
    end

    # Get authorizations for all social integration
    # Get authorizations and autoshares for all social integration and has redirect for user to login
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_group_id ID of the client group association
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_authorizations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_authorizations ..."
      end
      # resource path
      local_var_path = "/socials/authorizations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'clientGroupId'] = opts[:'client_group_id'] if !opts[:'client_group_id'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_authorizations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the profile properties
    # Gets the social profile properties
    # @param social_type The social type
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_social_profile_properties(social_type, opts = {})
      get_social_profile_properties_with_http_info(social_type, opts)
      return nil
    end

    # Gets the profile properties
    # Gets the social profile properties
    # @param social_type The social type
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_profile_properties_with_http_info(social_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_profile_properties ..."
      end
      # verify the required parameter 'social_type' is set
      fail ArgumentError, "Missing the required parameter 'social_type' when calling SocialsApi.get_social_profile_properties" if social_type.nil?
      # resource path
      local_var_path = "/socials/profile".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'socialType'] = social_type

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_profile_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get social stats for a prompt
    # Get social stats for a prompt by id
    # @param prompt_id ID of the prompt
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_social_stats(prompt_id, opts = {})
      get_social_stats_with_http_info(prompt_id, opts)
      return nil
    end

    # Get social stats for a prompt
    # Get social stats for a prompt by id
    # @param prompt_id ID of the prompt
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_stats_with_http_info(prompt_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_stats ..."
      end
      # verify the required parameter 'prompt_id' is set
      fail ArgumentError, "Missing the required parameter 'prompt_id' when calling SocialsApi.get_social_stats" if prompt_id.nil?
      # resource path
      local_var_path = "/socials/{promptId}/stats".sub('{format}','json').sub('{' + 'promptId' + '}', prompt_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates social content
    # Creates social content for an email
    # @param email_id The email&#39;s id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_social_content(email_id, opts = {})
      post_social_content_with_http_info(email_id, opts)
      return nil
    end

    # Creates social content
    # Creates social content for an email
    # @param email_id The email&#39;s id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_social_content_with_http_info(email_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.post_social_content ..."
      end
      # verify the required parameter 'email_id' is set
      fail ArgumentError, "Missing the required parameter 'email_id' when calling SocialsApi.post_social_content" if email_id.nil?
      # resource path
      local_var_path = "/socials/content".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["emailId"] = email_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#post_social_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the auto shares from the client group assoc id
    # Gets the auto shares from the client group assoc id
    # @param send_mechanism The send mechanism for the prompt
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enabled Is the send mechanism enabled?
    # @return [nil]
    def update_client_group_send_mechanism(send_mechanism, client_group_id, opts = {})
      update_client_group_send_mechanism_with_http_info(send_mechanism, client_group_id, opts)
      return nil
    end

    # Gets the auto shares from the client group assoc id
    # Gets the auto shares from the client group assoc id
    # @param send_mechanism The send mechanism for the prompt
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @option opts [String] :enabled Is the send mechanism enabled?
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_client_group_send_mechanism_with_http_info(send_mechanism, client_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.update_client_group_send_mechanism ..."
      end
      # verify the required parameter 'send_mechanism' is set
      fail ArgumentError, "Missing the required parameter 'send_mechanism' when calling SocialsApi.update_client_group_send_mechanism" if send_mechanism.nil?
      # verify the required parameter 'client_group_id' is set
      fail ArgumentError, "Missing the required parameter 'client_group_id' when calling SocialsApi.update_client_group_send_mechanism" if client_group_id.nil?
      # resource path
      local_var_path = "/socials/client/sendMechanism".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["sendMechanism"] = send_mechanism
      form_params["clientGroupId"] = client_group_id
      form_params["enabled"] = opts[:'enabled'] if !opts[:'enabled'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#update_client_group_send_mechanism\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates facebook page Ids
    # Updates facebook page Ids to be sent to for prompts
    # @param page_ids Page Ids for the prompt
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_facebook_pages(page_ids, opts = {})
      update_facebook_pages_with_http_info(page_ids, opts)
      return nil
    end

    # Updates facebook page Ids
    # Updates facebook page Ids to be sent to for prompts
    # @param page_ids Page Ids for the prompt
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_facebook_pages_with_http_info(page_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.update_facebook_pages ..."
      end
      # verify the required parameter 'page_ids' is set
      fail ArgumentError, "Missing the required parameter 'page_ids' when calling SocialsApi.update_facebook_pages" if page_ids.nil?
      # resource path
      local_var_path = "/socials/facebook/pages".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["pageIds"] = page_ids

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#update_facebook_pages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates social content
    # Updates social content for an email
    # @param social_id The social id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title The title for the article
    # @option opts [String] :description The article description
    # @option opts [String] :picture_url The article picture url
    # @option opts [String] :suggested_message The suggested message to use
    # @return [nil]
    def update_social_content(social_id, opts = {})
      update_social_content_with_http_info(social_id, opts)
      return nil
    end

    # Updates social content
    # Updates social content for an email
    # @param social_id The social id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :title The title for the article
    # @option opts [String] :description The article description
    # @option opts [String] :picture_url The article picture url
    # @option opts [String] :suggested_message The suggested message to use
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_social_content_with_http_info(social_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.update_social_content ..."
      end
      # verify the required parameter 'social_id' is set
      fail ArgumentError, "Missing the required parameter 'social_id' when calling SocialsApi.update_social_content" if social_id.nil?
      # resource path
      local_var_path = "/socials/content".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["socialId"] = social_id
      form_params["title"] = opts[:'title'] if !opts[:'title'].nil?
      form_params["description"] = opts[:'description'] if !opts[:'description'].nil?
      form_params["pictureUrl"] = opts[:'picture_url'] if !opts[:'picture_url'].nil?
      form_params["suggestedMessage"] = opts[:'suggested_message'] if !opts[:'suggested_message'].nil?

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#update_social_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end

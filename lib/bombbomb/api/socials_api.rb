=begin
#BombBomb

#We make it easy to build relationships using simple videos.

OpenAPI spec version: 2.0.24005

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BombBomb
  class SocialsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Gets the social email properties
    # Gets the social email properties
    # @param jericho_id associated jericho Id
    # @param email_id This is the email Id for the email url
    # @param originator_id This is the originator Id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_social_article_properties(jericho_id, email_id, originator_id, opts = {})
      get_social_article_properties_with_http_info(jericho_id, email_id, originator_id, opts)
      return nil
    end

    # Gets the social email properties
    # Gets the social email properties
    # @param jericho_id associated jericho Id
    # @param email_id This is the email Id for the email url
    # @param originator_id This is the originator Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_article_properties_with_http_info(jericho_id, email_id, originator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_article_properties ..."
      end
      # verify the required parameter 'jericho_id' is set
      fail ArgumentError, "Missing the required parameter 'jericho_id' when calling SocialsApi.get_social_article_properties" if jericho_id.nil?
      # verify the required parameter 'email_id' is set
      fail ArgumentError, "Missing the required parameter 'email_id' when calling SocialsApi.get_social_article_properties" if email_id.nil?
      # verify the required parameter 'originator_id' is set
      fail ArgumentError, "Missing the required parameter 'originator_id' when calling SocialsApi.get_social_article_properties" if originator_id.nil?
      # resource path
      local_var_path = "/socials/properties".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'jerichoId'] = jericho_id
      query_params[:'emailId'] = email_id
      query_params[:'originatorId'] = originator_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_article_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the auto shares from the client group assoc id
    # Gets the auto shares from the client group assoc id
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_social_auto_shares(client_group_id, opts = {})
      get_social_auto_shares_with_http_info(client_group_id, opts)
      return nil
    end

    # Gets the auto shares from the client group assoc id
    # Gets the auto shares from the client group assoc id
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_auto_shares_with_http_info(client_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_auto_shares ..."
      end
      # verify the required parameter 'client_group_id' is set
      fail ArgumentError, "Missing the required parameter 'client_group_id' when calling SocialsApi.get_social_auto_shares" if client_group_id.nil?
      # resource path
      local_var_path = "/socials/shares".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'clientGroupId'] = client_group_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_auto_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get permissions for social integration
    # Get permissions for social integration and has redirect for user to login
    # @param social_type Type of social integration
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_social_permissions(social_type, opts = {})
      get_social_permissions_with_http_info(social_type, opts)
      return nil
    end

    # Get permissions for social integration
    # Get permissions for social integration and has redirect for user to login
    # @param social_type Type of social integration
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_permissions_with_http_info(social_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_permissions ..."
      end
      # verify the required parameter 'social_type' is set
      fail ArgumentError, "Missing the required parameter 'social_type' when calling SocialsApi.get_social_permissions" if social_type.nil?
      # resource path
      local_var_path = "/socials/permissions".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'socialType'] = social_type

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the social state
    # Gets the social state
    # @param originator_id associated originatorId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_social_status(originator_id, opts = {})
      get_social_status_with_http_info(originator_id, opts)
      return nil
    end

    # Gets the social state
    # Gets the social state
    # @param originator_id associated originatorId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_social_status_with_http_info(originator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.get_social_status ..."
      end
      # verify the required parameter 'originator_id' is set
      fail ArgumentError, "Missing the required parameter 'originator_id' when calling SocialsApi.get_social_status" if originator_id.nil?
      # resource path
      local_var_path = "/socials/states".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'originatorId'] = originator_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#get_social_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the auto shares from the client group assoc id
    # Gets the auto shares from the client group assoc id
    # @param auto_share The social share that will auto share to
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_social_auto_shares(auto_share, client_group_id, opts = {})
      update_social_auto_shares_with_http_info(auto_share, client_group_id, opts)
      return nil
    end

    # Gets the auto shares from the client group assoc id
    # Gets the auto shares from the client group assoc id
    # @param auto_share The social share that will auto share to
    # @param client_group_id ID of the client group association
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_social_auto_shares_with_http_info(auto_share, client_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.update_social_auto_shares ..."
      end
      # verify the required parameter 'auto_share' is set
      fail ArgumentError, "Missing the required parameter 'auto_share' when calling SocialsApi.update_social_auto_shares" if auto_share.nil?
      # verify the required parameter 'client_group_id' is set
      fail ArgumentError, "Missing the required parameter 'client_group_id' when calling SocialsApi.update_social_auto_shares" if client_group_id.nil?
      # resource path
      local_var_path = "/socials/shares".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["autoShare"] = auto_share
      form_params["clientGroupId"] = client_group_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#update_social_auto_shares\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets the users social message to what they typed in
    # Sets the users social message to what they typed in
    # @param message The social message the user typed in
    # @param originator_id The parent id tied to the social share
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_social_message(message, originator_id, opts = {})
      update_social_message_with_http_info(message, originator_id, opts)
      return nil
    end

    # Sets the users social message to what they typed in
    # Sets the users social message to what they typed in
    # @param message The social message the user typed in
    # @param originator_id The parent id tied to the social share
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_social_message_with_http_info(message, originator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.update_social_message ..."
      end
      # verify the required parameter 'message' is set
      fail ArgumentError, "Missing the required parameter 'message' when calling SocialsApi.update_social_message" if message.nil?
      # verify the required parameter 'originator_id' is set
      fail ArgumentError, "Missing the required parameter 'originator_id' when calling SocialsApi.update_social_message" if originator_id.nil?
      # resource path
      local_var_path = "/socials/message".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["message"] = message
      form_params["originatorId"] = originator_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#update_social_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates the social state for the object
    # Updates the social state for the object
    # @param state The state to set to
    # @param originator_id The parent id tied to the social share
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_social_status(state, originator_id, opts = {})
      update_social_status_with_http_info(state, originator_id, opts)
      return nil
    end

    # Updates the social state for the object
    # Updates the social state for the object
    # @param state The state to set to
    # @param originator_id The parent id tied to the social share
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_social_status_with_http_info(state, originator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SocialsApi.update_social_status ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling SocialsApi.update_social_status" if state.nil?
      # verify the required parameter 'originator_id' is set
      fail ArgumentError, "Missing the required parameter 'originator_id' when calling SocialsApi.update_social_status" if originator_id.nil?
      # resource path
      local_var_path = "/socials/state".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}
      form_params["state"] = state
      form_params["originatorId"] = originator_id

      # http body (model)
      post_body = nil
      auth_names = ['BBOAuth2']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialsApi#update_social_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
